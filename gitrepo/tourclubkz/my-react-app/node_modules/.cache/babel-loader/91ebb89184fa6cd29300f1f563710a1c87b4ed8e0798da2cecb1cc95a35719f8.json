{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/tourclubschool/tourclubkz/my-react-app/src/lessonmain.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Navpanmini from './navpanmini';\nimport './lessonmain.css';\nimport { useNavigate } from \"react-router-dom\"; // Импортируйте useNavigate\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst LessonListPage = () => {\n  _s();\n  const navigate = useNavigate(); // Используйте useNavigate\n  const [autoSelectedNav, setAutoSelectedNav] = useState(null);\n  const [isManualNav, setIsManualNav] = useState(false);\n  const {\n    title,\n    lesson\n  } = useParams();\n  const titleWithSpaces = lesson.replace(/-/g, ' ');\n  const courseWithSpaces = title.replace(/-/g, ' ');\n  const [responseData, setResponseData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [videoEnding, setVideoEnding] = useState(false);\n  const [secondsBeforeEndToShowButton, setSecondsBeforeEndToShowButton] = useState(30);\n  const [videoEnded, setVideoEnded] = useState(false);\n  const [allTestsPassed, setAllTestsPassed] = useState(false);\n  const [intervalId, setIntervalId] = useState(null);\n  const [containers, setContainers] = useState([]);\n  const videoRef = useRef(null);\n  const [selectedNav, setSelectedNav] = useState('Информация');\n  const [isNavChangedManually, setIsNavChangedManually] = useState(false);\n  const [currentContainerIndex, setCurrentContainerIndex] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  const itemsPerPage = 4; // Change this to the number of items you want per page\n  const [successfulTries, setSuccessfulTries] = useState({});\n  const [unsuccessfulTries, setUnsuccessfulTries] = useState({});\n  const [lastContainerIndex, setLastContainerIndex] = useState(null);\n  const [lastUpdatedNav, setLastUpdatedNav] = useState(null); // Add this state\n  // Calculate the total number of pages\n  const totalPages = Math.ceil(containers.length / itemsPerPage);\n  const [shouldAutoSelectNav, setShouldAutoSelectNav] = useState(true);\n  const [hasIncreased, setHasIncreased] = useState(false);\n  const currentItems = containers.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n  const [questionTries, setQuestionTries] = useState({});\n  // Добавьте новое состояние\n  const [wasNavChangedManually, setWasNavChangedManually] = useState(false);\n  const [autoSelectedContainers, setAutoSelectedContainers] = useState({});\n  const [buttonClass, setButtonClass] = useState({});\n  const token = localStorage.getItem('token');\n  console.log = () => {};\n  let decoded = jwtDecode(token);\n  let user_id = decoded.sub;\n  const date = new Date(); // текущая дата и время\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // добавляем ведущий ноль, если месяц меньше 10\n  const day = String(date.getDate()).padStart(2, '0'); // добавляем ведущий ноль, если день меньше 10\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  const [duration, setDuration] = useState(0);\n  const formattedTimestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  // ВОПРОСЫ\n  const [modalOpen, setModalOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState('');\n  const [questions, setQuestions] = useState([]);\n  const [incorrectMessages, setIncorrectMessages] = useState('');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [tries, setTries] = useState(0);\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const [currentTime, setCurrentTime] = useState(0);\n\n  //ТЕРМИНЫ\n  const [termins, setTermins] = useState([]);\n  const [answerCorrectness, setAnswerCorrectness] = useState({});\n  //Doplinks\n  const [doplinks, setDoplinks] = useState([]);\n  const openModal = imageURL => {\n    setSelectedImage(imageURL);\n    setModalOpen(true);\n  };\n  const closeModal = () => {\n    setSelectedImage('');\n    setModalOpen(false);\n  };\n  const onStateChange = event => {\n    if (videoRef.current) {\n      if (event.data === YouTube.PlayerState.PLAYING) {\n        const id = setInterval(() => {\n          videoRef.current.internalPlayer.getCurrentTime().then(time => {\n            console.log(`Время воспроизведения: ${Math.floor(time)} секунд`);\n            // handleTimeUpdate(time);\n          });\n        }, 1000);\n        setIntervalId(id);\n      } else {\n        clearInterval(intervalId);\n      }\n      const interval = setInterval(() => {\n        if (videoRef.current && videoRef.current.internalPlayer.getCurrentTime) {\n          // handleTimeUpdate(currentTime);\n        }\n      }, 1000); // Проверка каждую секунду\n\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  };\n  useEffect(() => {\n    handleTimeUpdate(currentTime); // someValue - это нужное вам значение, которое передается в handleTimeUpdate\n  }, [currentPage, currentTime]);\n  useEffect(() => {\n    const checkResultAndShowVideo = async () => {\n      console.log(user_id);\n      try {\n        const checkResultResponse = await fetch('http://localhost:8888/tourschoolphp/Checkresulttoshowvideo.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            user_id: user_id,\n            title: titleWithSpaces,\n            course: courseWithSpaces\n          })\n        });\n        if (!checkResultResponse.ok) {\n          throw new Error('Ошибка при проверке результата для отображения видео');\n        }\n        const checkResultData = await checkResultResponse.json();\n\n        // Check if checkResultData is an array before accessing its elements\n        if (Array.isArray(checkResultData) && checkResultData.length > 0) {\n          // Вывод данных из PHP-скрипта в консоль\n          console.log('Response from PHP script:', checkResultData);\n\n          // Извлекаем значение available_at из первого элемента массива\n          const availableAt = checkResultData[0].available_at;\n          console.log('available_at:', availableAt);\n\n          // Получаем текущее время клиента\n          const clientTime = new Date();\n\n          // Получаем время с сервера и преобразуем его в объект Date (время сервера считаем в UTC)\n          const serverTimeUTC = new Date(availableAt);\n\n          // Получаем смещение временной зоны клиента\n          const clientTimezoneOffset = clientTime.getTimezoneOffset();\n\n          // Корректируем время сервера на смещение временной зоны клиента\n          const serverTime = new Date(serverTimeUTC.getTime() - clientTimezoneOffset * 60000);\n          console.log(serverTimeUTC);\n\n          // Сравниваем время с сервера и времени клиента\n          if (serverTime > clientTime) {\n            // Если время на сервере больше времени клиента, выполняем перенаправление\n            navigate('/courses');\n          } else {}\n        }\n      } catch (error) {\n        // console.error('Ошибка при проверке результата для отображения видео:', error);\n      }\n    };\n    checkResultAndShowVideo();\n  }, [user_id, titleWithSpaces, courseWithSpaces]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/testlesson.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            lesson: titleWithSpaces\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n        const data = await response.json();\n\n        // Check if data is an array before mapping over it\n        if (Array.isArray(data)) {\n          // Преобразовать данные в ожидаемый формат и перемешать варианты ответов\n          const formattedQuestions = data.map(question => ({\n            ...question,\n            options: shuffleArray([question.incorrect_answer1, question.incorrect_answer2, question.incorrect_answer3, question.correct_answer])\n          }));\n          setQuestions(formattedQuestions);\n        }\n      } catch (error) {\n        console.error('Ошибка при отправке запроса:', error);\n      }\n    };\n    fetchData();\n  }, [titleWithSpaces]);\n\n  // Измените handleNavClick, чтобы устанавливать wasNavChangedManually в true\n  const handleNavClick = navType => {\n    setIsNavChangedManually(true);\n    setWasNavChangedManually(true);\n    setSelectedNav(navType);\n  };\n  useEffect(() => {\n    console.log(`Current Page: ${currentPage}, Selected Nav: ${selectedNav}`);\n    console.log(videoRef.current);\n  }, [currentPage, selectedNav]);\n\n  // Измените handleTimeUpdate, чтобы проверять wasNavChangedManually, а не isNavChangedManually\n  const handleTimeUpdate = (aaa, curcur) => {\n    const timeToEnd = duration - aaa;\n\n    // Показать кнопку за N секунд до окончания видео\n    if (timeToEnd <= secondsBeforeEndToShowButton && !videoEnding) {\n      setVideoEnding(true);\n    }\n    setQuestions(questions => {\n      let newSelectedNav = selectedNav;\n      let newcurrentQuestionIndex = currentQuestionIndex;\n      const updatedQuestions = questions.map((question, index) => {\n        if (!question.isShuffled) {\n          question.options = shuffleArray(question.options);\n          question.isShuffled = true;\n        }\n        if (question.isVisible) {\n          setSelectedNav(question.type);\n          videoRef.current.internalPlayer.pauseVideo();\n        }\n        const timeIn = timeToSeconds(question.time_in);\n        const isVisible = aaa >= timeIn;\n        if (isVisible && !question.isVisible) {\n          // Check if the question type is already auto-selected\n          if (!autoSelectedContainers[question.id]) {\n            newSelectedNav = question.type;\n            // Update autoSelectedContainers\n            setAutoSelectedContainers(autoSelectedContainers => ({\n              ...autoSelectedContainers,\n              [question.id]: true\n            }));\n          }\n          newcurrentQuestionIndex = index;\n        }\n        if (newSelectedNav !== selectedNav) {\n          setSelectedNav(newSelectedNav);\n        }\n        return {\n          ...question,\n          isVisible\n        };\n      });\n      return updatedQuestions;\n    });\n    setContainers(containers => {\n      let newSelectedNav = selectedNav;\n      let newCurrentContainerIndex = currentContainerIndex;\n      const updatedContainers = containers.map((container, index) => {\n        const timeIn = timeToSeconds(container.time_in);\n        const isVisible = aaa >= timeIn;\n        if (isVisible && !container.isVisible) {\n          if (index !== newCurrentContainerIndex) {\n            // Проверьте, был ли контейнер уже автоматически выбран\n            if (!autoSelectedContainers[container.id]) {\n              newSelectedNav = container.type;\n              // Обновите autoSelectedContainers\n              setAutoSelectedContainers(autoSelectedContainers => ({\n                ...autoSelectedContainers,\n                [container.id]: true\n              }));\n            }\n            newCurrentContainerIndex = index;\n          }\n        }\n        return {\n          ...container,\n          isVisible\n        };\n      });\n      if (newSelectedNav !== selectedNav) {\n        setSelectedNav(newSelectedNav);\n      }\n      setCurrentContainerIndex(newCurrentContainerIndex);\n      if (newCurrentContainerIndex !== lastContainerIndex) {\n        setCurrentContainerIndex(newCurrentContainerIndex);\n        setLastContainerIndex(newCurrentContainerIndex);\n      }\n      if (newCurrentContainerIndex + 1 > currentPage * itemsPerPage) {\n        setCurrentPage(prevPage => prevPage + 0.5);\n      }\n      if (videoRef.current) {\n        console.log(newCurrentContainerIndex, 'time', aaa, \"item\", itemsPerPage, \"currentPage\", currentPage);\n      }\n      setLastContainerIndex(newCurrentContainerIndex);\n      return updatedContainers;\n    });\n    setTermins(termins => {\n      let newSelectedNav = selectedNav;\n      let newCurrentContainerIndex = currentContainerIndex;\n      const updatedContainers = termins.map((termin, index) => {\n        const timeIn = timeToSeconds(termin.time_in);\n        const isVisible = currentTime >= timeIn;\n        if (isVisible && !termin.isVisible) {\n          if (index !== newCurrentContainerIndex) {\n            // Проверьте, был ли контейнер уже автоматически выбран\n            if (!autoSelectedContainers[termin.id]) {\n              newSelectedNav = termin.type;\n              // Обновите autoSelectedContainers\n              setAutoSelectedContainers(autoSelectedContainers => ({\n                ...autoSelectedContainers,\n                [termin.id]: true\n              }));\n            }\n            newCurrentContainerIndex = index;\n          }\n        }\n        return {\n          ...termin,\n          isVisible\n        };\n      });\n      if (newSelectedNav !== selectedNav) {\n        setSelectedNav(newSelectedNav);\n      }\n      setCurrentContainerIndex(newCurrentContainerIndex);\n      if (newCurrentContainerIndex !== lastContainerIndex) {\n        setCurrentContainerIndex(newCurrentContainerIndex);\n        setLastContainerIndex(newCurrentContainerIndex);\n      }\n      if (newCurrentContainerIndex + 1 > currentPage * itemsPerPage) {\n        setCurrentPage(currentPage => currentPage + 0.5);\n      }\n      setLastContainerIndex(newCurrentContainerIndex);\n      return updatedContainers;\n    });\n  };\n  const handleVideoEnd = () => {\n    setVideoEnded(true);\n    setVideoEnding(false); // Сбросить состояние, чтобы не показывать кнопку после окончания видео\n  };\n\n  // Измените useEffect, чтобы сбрасывать wasNavChangedManually обратно в false, когда видео достигает конца\n  useEffect(() => {\n    if (videoRef.current) {\n      const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n      currentTimePromise.then(currentTime => {\n        if (videoRef.current && currentTime >= duration) {\n          setWasNavChangedManually(false);\n        }\n      });\n    }\n  }, [videoRef.current]);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/lessonvideo.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            lesson: titleWithSpaces,\n            course: courseWithSpaces\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setResponseData(data);\n      } catch (error) {\n        console.error('Ошибка при отправке запроса:', error);\n      } finally {\n        // Устанавливаем статус загрузки в false после завершения запроса\n        setLoading(false);\n      }\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/containersmodel.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            lesson: titleWithSpaces\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setContainers(data.map(container => ({\n          ...container,\n          key: container.id\n        })));\n      } catch (error) {\n        // console.error('Ошибка при отправке запроса:', error);\n      }\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/termins.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            lesson: titleWithSpaces\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setTermins(data.map(termin => ({\n          ...termin,\n          key: termin.id\n        })));\n      } catch (error) {}\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/doplink.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            lesson: titleWithSpaces\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setDoplinks(data.map(doplink => ({\n          ...doplink,\n          key: doplink.id\n        })));\n      } catch (error) {\n        console.error('Ошибка при отправке запроса:', error);\n      }\n    };\n    fetchData();\n\n    // function onPlayerReady(event) {\n    //   const intervalId = setInterval(updateTime, 1000); // обновляйте время каждую секунду\n\n    //   // Очистите интервал при размонтировании\n    //   return () => {\n    //     clearInterval(intervalId);\n    //   };\n    // }\n\n    // // Обновите время воспроизведения\n    // function updateTime() {\n    //   const currentTime = videoRef.getCurrentTime();\n    //   handleTimeUpdate(currentTime); // здесь ваша функция handleTimeUpdate\n    // }\n  }, [titleWithSpaces, containers, termins, videoEnding]);\n  const timeToSeconds = time => {\n    let parts = time.split(':');\n    return +parts[0] * 60 * 60 + +parts[1] * 60 + +parts[2];\n  };\n  const handleOptionClick = (option, questionId, index) => {\n    const currentQuestion = questions.find(q => q.id === questionId);\n    const isAnswerCorrect = option === currentQuestion.correct_answer;\n    setAnswerCorrectness(prevState => ({\n      ...prevState,\n      [`${questionId}-${index}`]: isAnswerCorrect\n    }));\n    setButtonClass(prevButtonClass => ({\n      ...prevButtonClass,\n      [`${questionId}-${index}`]: isAnswerCorrect ? 'buttonindex-correct' : 'buttonindex-incorrect'\n    }));\n\n    // Update the class name for the clicked button based on the correctness of the answer\n    const updatedOptions = [...questions[currentQuestionIndex].options];\n    setQuestions(prevQuestions => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[currentQuestionIndex] = {\n        ...updatedQuestions[currentQuestionIndex],\n        options: updatedOptions\n      };\n      return updatedQuestions;\n    });\n\n    // Rest of your code remains unchanged\n    setQuestionTries(prevTries => {\n      const currentTries = prevTries[questionId] || {\n        total: 0,\n        lastAttempt: 0\n      };\n      const updatedTries = {\n        ...prevTries,\n        [questionId]: {\n          total: currentTries.total + 1,\n          lastAttempt: isAnswerCorrect ? currentTries.lastAttempt + 1 : currentTries.lastAttempt\n        }\n      };\n      if (!isAnswerCorrect && currentTries.total >= 2) {\n        setIncorrectMessages(prevMessages => ({\n          ...prevMessages,\n          [questionId]: `Неправильный ответ. Правильный ответ: ${currentQuestion.correct_answer}`\n        }));\n\n        // Do not reset the total count here\n        updatedTries[questionId] = {\n          total: currentTries.total,\n          lastAttempt: 0\n        };\n      } else {\n        setIncorrectMessages(prevMessages => ({\n          ...prevMessages,\n          [questionId]: isAnswerCorrect ? '' : 'Неправильный ответ. Попробуйте еще раз'\n        }));\n        if (isAnswerCorrect) {\n          var _updatedTries$questio;\n          setQuestions(prevQuestions => prevQuestions.filter(q => q.id !== currentQuestion.id));\n          setCurrentQuestionIndex(prevIndex => {\n            const nextIndex = prevIndex + 1;\n            return nextIndex < questions.length ? nextIndex : 0;\n          });\n          videoRef.current.internalPlayer.playVideo();\n\n          // Send data to the server only for correct answers\n          fetch('http://localhost:8888/tourschoolphp/testresult.php', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              user: user_id,\n              testid: currentQuestion.id,\n              tries: ((_updatedTries$questio = updatedTries[questionId]) === null || _updatedTries$questio === void 0 ? void 0 : _updatedTries$questio.total) || 0,\n              timestamp: formattedTimestamp\n            })\n          }).then(response => {\n            if (!response.ok) {\n              throw new Error('Ошибка при сохранении ответа на сервере');\n            }\n            return response.text();\n          }).then(data => {\n            console.log('Server response:', data);\n            return JSON.parse(data);\n          }).catch(error => {\n            console.error('Ошибка при отправке запроса:', error);\n          });\n        }\n      }\n      return updatedTries;\n    });\n    if (isAnswerCorrect) {\n      setSuccessfulTries(prev => ({\n        ...prev,\n        [questionId]: (prev[questionId] || 0) + 1\n      }));\n    } else {\n      setUnsuccessfulTries(prev => ({\n        ...prev,\n        [questionId]: (prev[questionId] || 0) + 1\n      }));\n    }\n    ;\n    if (questions.length === 1) {\n      // If there are no more questions, set allTestsPassed to true\n      setAllTestsPassed(true);\n    }\n  };\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if (videoRef.current) {\n      const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n      currentTimePromise.then(currentTime => {\n        containers.forEach(container => {\n          let timeIn = timeToSeconds(container.time_in);\n          let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n        });\n        if (videoRef.current && currentTime > maxTimeOut) {\n          setIsNavChangedManually(false);\n          setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n        }\n      });\n    }\n  }, [containers, videoRef.current, isNavChangedManually]);\n  const videoOptions = {\n    height: '500px',\n    // Высота плеера\n    width: '100%',\n    // Ширина плеера\n    playerVars: {\n      // Параметры плеера\n      autoplay: 1,\n      // Автовоспроизведение видео\n      controls: 1,\n      // Отображение элементов управления\n      showinfo: 0,\n      // Отображение информации о видео\n      modestbranding: 0 // Удаление логотипа YouTube\n    }\n  };\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if (videoRef.current) {\n      const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n      currentTimePromise.then(currentTime => {\n        termins.forEach(termin => {\n          let timeIn = timeToSeconds(termin.time_in);\n          let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n        });\n        if (videoRef.current && currentTime > maxTimeOut) {\n          setIsNavChangedManually(false);\n          setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n        }\n      });\n    }\n  }, [termins, videoRef.current, isNavChangedManually]);\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if (videoRef.current) {\n      const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n      currentTimePromise.then(currentTime => {\n        questions.forEach(question => {\n          let timeIn = timeToSeconds(question.time_in);\n          let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n        });\n        if (videoRef.current && currentTime > maxTimeOut) {\n          setIsNavChangedManually(false);\n          setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n        }\n      });\n    }\n  }, [questions, videoRef.current, isNavChangedManually]);\n  const handleFinishLesson = () => {\n    fetch('http://localhost:8888/tourschoolphp/finishlesson.php', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: user_id,\n        lesson: titleWithSpaces,\n        date: formattedTimestamp\n      })\n    }).then(response => {\n      if (!response.ok) {\n        throw new Error('Ошибка при сохранении ответа на сервере');\n      }\n      return response.text();\n    }).then(data => {\n      console.log('Server response:', data);\n      return JSON.parse(data);\n    }).catch(error => {\n      console.error('Ошибка при отправке запроса:', error);\n    });\n  };\n  useEffect(() => {\n    const fetchCurrentTime = async () => {\n      if (videoRef.current && videoRef.current.internalPlayer && videoRef.current.internalPlayer.getCurrentTime) {\n        const time = await videoRef.current.internalPlayer.getCurrentTime();\n        setCurrentTime(time);\n      }\n      if (videoRef.current && videoRef.current.internalPlayer && videoRef.current.internalPlayer.getDuration) {\n        const duration = await videoRef.current.internalPlayer.getDuration();\n        setDuration(duration);\n      }\n    };\n    fetchCurrentTime();\n    const intervalId = setInterval(fetchCurrentTime, 1000); // Update every second\n\n    return () => clearInterval(intervalId); // Clean up on unmount\n  }, []);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 762,\n      columnNumber: 10\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"connews\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"containerlesson\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: titleWithSpaces\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 768,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containervideoimg\",\n        children: videoRef && responseData && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"videoless\",\n          children: /*#__PURE__*/_jsxDEV(YouTube, {\n            videoId: responseData,\n            opts: videoOptions,\n            onStateChange: onStateChange,\n            ref: videoRef\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 774,\n            columnNumber: 3\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 773,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 769,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containerwithinfo\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"linewithtypes\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: `textnav ${selectedNav === 'Термины' || !isManualNav === 'Термины' ? 'active' : ''}`,\n            onClick: () => handleNavClick('Термины'),\n            children: \"\\u0422\\u0435\\u0440\\u043C\\u0438\\u043D\\u044B\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 788,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `textnav ${selectedNav === 'Тест' || !isManualNav === 'Тест' ? 'active' : ''}`,\n            onClick: () => handleNavClick('Тест'),\n            children: \"\\u0422\\u0435\\u0441\\u0442\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 789,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `textnav ${selectedNav === 'Информация' || !isManualNav === 'Информация' ? 'active' : ''}`,\n            onClick: () => handleNavClick('Информация'),\n            children: \"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 790,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `textnav ${selectedNav === 'Дополнительная информация' ? 'active' : ''}`,\n            onClick: () => handleNavClick('Дополнительная информация'),\n            children: \"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 791,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 787,\n          columnNumber: 9\n        }, this), allTestsPassed && videoEnding && /*#__PURE__*/_jsxDEV(\"a\", {\n          href: `/courses/${title}/${lesson}/summary-page`,\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"urokend\",\n            onClick: handleFinishLesson,\n            children: \"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u0443\\u0440\\u043E\\u043A\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 795,\n            columnNumber: 1\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 794,\n          columnNumber: 9\n        }, this), questions.map(question => {\n          if (videoRef.current) {\n            let timeIn = timeToSeconds(question.time_in);\n            let isVisible = videoRef.current && currentTime >= timeIn;\n\n            // Only render the question if it's both visible and its type matches the selected nav\n\n            if (isVisible && (selectedNav === question.type || !isManualNav === question.type)) {\n              return /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"testinfo\",\n                  style: {\n                    display: 'flex',\n                    margin: '5px 0'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                    children: question.question\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 820,\n                    columnNumber: 11\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"buttoncontless\",\n                    children: question.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: buttonClass[`${question.id}-${index}`] || \"buttonindex\",\n                      onClick: () => handleOptionClick(option, question.id, index),\n                      children: option\n                    }, index, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 823,\n                      columnNumber: 5\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 821,\n                    columnNumber: 11\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 818,\n                  columnNumber: 9\n                }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 835,\n                  columnNumber: 9\n                }, this)]\n              }, question.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 817,\n                columnNumber: 5\n              }, this);\n            }\n            return null;\n          }\n        }), currentItems.map(container => {\n          let timeIn = timeToSeconds(container.time_in);\n          let isVisible = videoRef.current && currentTime >= timeIn;\n          if (isVisible && (selectedNav === container.type || !isManualNav === container.type)) {\n            if (isNavChangedManually && selectedNav !== container.type) {\n              return null;\n            }\n\n            // Проверка, является ли текст ссылкой на изображение\n            const imageFormats = ['.jpg', '.png', '.jpeg', '.gif', '.bmp', '.svg', '.webp'];\n            const isImage = imageFormats.some(format => container.text.includes(format));\n            return /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(React.Fragment, {\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"textinfo\",\n                  style: {\n                    display: 'block',\n                    margin: '10px 0' // Add top and bottom margin of 10 pixels\n                  },\n                  children: isImage ? /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: `http://localhost:8888/tourschoolphp/${container.text}`,\n                    alt: \"123123\",\n                    width: \"400\",\n                    onClick: () => openModal(`http://localhost:8888/tourschoolphp/${container.text}`)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 871,\n                    columnNumber: 11\n                  }, this) : container.text.split('\\n').map((line, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n                    children: [line, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 882,\n                      columnNumber: 19\n                    }, this)]\n                  }, index, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 880,\n                    columnNumber: 17\n                  }, this))\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 863,\n                  columnNumber: 11\n                }, this)\n              }, container.id, false, {\n                fileName: _jsxFileName,\n                lineNumber: 862,\n                columnNumber: 9\n              }, this)\n            }, void 0, false);\n          }\n          return null;\n        }), termins.map(termin => {\n          let timeIn = timeToSeconds(termin.time_in);\n          let isVisible = videoRef.current && currentTime >= timeIn;\n          if (isVisible && (selectedNav === termin.type || !isManualNav === termin.type)) {\n            // Если пользователь вручную переключился на другой блок, не обновляйте блок автоматически\n            if (isNavChangedManually && selectedNav !== termin.type) {\n              return null;\n            }\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"textinfo\",\n                style: {\n                  display: 'block',\n                  margin: '5px 0' // Add top and bottom margin of 10 pixels\n                },\n                children: termin.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 907,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 917,\n                columnNumber: 9\n              }, this)]\n            }, termin.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 906,\n              columnNumber: 7\n            }, this);\n          }\n          return null;\n        }), selectedNav === 'Дополнительная информация' && doplinks.map(doplink => {\n          // Если selectedNav - это переменная, которая должна быть обновлена, необходимо использовать '=' вместо ';'\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"textinfo\",\n              style: {\n                display: 'block',\n                margin: '5px 0' // Add top and bottom margin of 10 pixels\n              },\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: doplink.text,\n                children: doplink.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 938,\n                columnNumber: 9\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 931,\n              columnNumber: 7\n            }, this)\n          }, doplink.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 930,\n            columnNumber: 5\n          }, this);\n        }), modalOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal7\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"close7\",\n            onClick: closeModal,\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 946,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"modal-content7\",\n            src: selectedImage,\n            alt: \"Enlarged Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 947,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 945,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Navpanmini, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 951,\n          columnNumber: 1\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 767,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 766,\n    columnNumber: 5\n  }, this);\n};\n_s(LessonListPage, \"732mkwCIRfvXp3QbJGbPbKGcaTY=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = LessonListPage;\nexport default LessonListPage;\nvar _c;\n$RefreshReg$(_c, \"LessonListPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useParams","jwtDecode","BrowserRouter","Router","Route","Link","Switch","Navpanmini","useNavigate","YouTube","jsxDEV","_jsxDEV","Fragment","_Fragment","LessonListPage","_s","navigate","autoSelectedNav","setAutoSelectedNav","isManualNav","setIsManualNav","title","lesson","titleWithSpaces","replace","courseWithSpaces","responseData","setResponseData","loading","setLoading","videoEnding","setVideoEnding","secondsBeforeEndToShowButton","setSecondsBeforeEndToShowButton","videoEnded","setVideoEnded","allTestsPassed","setAllTestsPassed","intervalId","setIntervalId","containers","setContainers","videoRef","selectedNav","setSelectedNav","isNavChangedManually","setIsNavChangedManually","currentContainerIndex","setCurrentContainerIndex","currentPage","setCurrentPage","itemsPerPage","successfulTries","setSuccessfulTries","unsuccessfulTries","setUnsuccessfulTries","lastContainerIndex","setLastContainerIndex","lastUpdatedNav","setLastUpdatedNav","totalPages","Math","ceil","length","shouldAutoSelectNav","setShouldAutoSelectNav","hasIncreased","setHasIncreased","currentItems","slice","questionTries","setQuestionTries","wasNavChangedManually","setWasNavChangedManually","autoSelectedContainers","setAutoSelectedContainers","buttonClass","setButtonClass","token","localStorage","getItem","console","log","decoded","user_id","sub","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","duration","setDuration","formattedTimestamp","modalOpen","setModalOpen","selectedImage","setSelectedImage","questions","setQuestions","incorrectMessages","setIncorrectMessages","currentQuestionIndex","setCurrentQuestionIndex","tries","setTries","shuffleArray","array","i","j","floor","random","currentTime","setCurrentTime","termins","setTermins","answerCorrectness","setAnswerCorrectness","doplinks","setDoplinks","openModal","imageURL","closeModal","onStateChange","event","current","data","PlayerState","PLAYING","id","setInterval","internalPlayer","getCurrentTime","then","time","clearInterval","interval","handleTimeUpdate","checkResultAndShowVideo","checkResultResponse","fetch","method","headers","body","JSON","stringify","course","ok","Error","checkResultData","json","Array","isArray","availableAt","available_at","clientTime","serverTimeUTC","clientTimezoneOffset","getTimezoneOffset","serverTime","getTime","error","fetchData","response","formattedQuestions","map","question","options","incorrect_answer1","incorrect_answer2","incorrect_answer3","correct_answer","handleNavClick","navType","aaa","curcur","timeToEnd","newSelectedNav","newcurrentQuestionIndex","updatedQuestions","index","isShuffled","isVisible","type","pauseVideo","timeIn","timeToSeconds","time_in","newCurrentContainerIndex","updatedContainers","container","prevPage","termin","handleVideoEnd","currentTimePromise","responseBody","text","parse","key","doplink","parts","split","handleOptionClick","option","questionId","currentQuestion","find","q","isAnswerCorrect","prevState","prevButtonClass","updatedOptions","prevQuestions","prevTries","currentTries","total","lastAttempt","updatedTries","prevMessages","_updatedTries$questio","filter","prevIndex","nextIndex","playVideo","user","testid","timestamp","catch","prev","maxTimeOut","forEach","videoOptions","height","width","playerVars","autoplay","controls","showinfo","modestbranding","handleFinishLesson","fetchCurrentTime","getDuration","children","fileName","_jsxFileName","lineNumber","columnNumber","className","videoId","opts","ref","onClick","href","style","display","margin","imageFormats","isImage","some","format","includes","src","alt","line","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/tourclubschool/tourclubkz/my-react-app/src/lessonmain.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Navpanmini from './navpanmini';\nimport './lessonmain.css';\n\nimport { useNavigate } from \"react-router-dom\"; // Импортируйте useNavigate\nimport YouTube from 'react-youtube';\nconst LessonListPage = () => {\n  const navigate = useNavigate(); // Используйте useNavigate\n  const [autoSelectedNav, setAutoSelectedNav] = useState(null);\n  const [isManualNav, setIsManualNav] = useState(false);\nconst { title, lesson } = useParams();\nconst titleWithSpaces = lesson.replace(/-/g, ' ');\nconst courseWithSpaces = title.replace(/-/g, ' ');\nconst [responseData, setResponseData] = useState(null);\nconst [loading, setLoading] = useState(true);\nconst [videoEnding, setVideoEnding] = useState(false);\nconst [secondsBeforeEndToShowButton, setSecondsBeforeEndToShowButton] = useState(30);\nconst [videoEnded, setVideoEnded] = useState(false);\nconst [allTestsPassed, setAllTestsPassed] = useState(false);\nconst [intervalId, setIntervalId] = useState(null);\n\nconst [containers, setContainers] = useState([]);\nconst videoRef = useRef(null);\nconst [selectedNav, setSelectedNav] = useState('Информация');\nconst [isNavChangedManually, setIsNavChangedManually] = useState(false);\nconst [currentContainerIndex, setCurrentContainerIndex] = useState(0);\nconst [currentPage, setCurrentPage] = useState(1);\nconst itemsPerPage = 4; // Change this to the number of items you want per page\nconst [successfulTries, setSuccessfulTries] = useState({});\nconst [unsuccessfulTries, setUnsuccessfulTries] = useState({});\nconst [lastContainerIndex, setLastContainerIndex] = useState(null);\nconst [lastUpdatedNav, setLastUpdatedNav] = useState(null); // Add this state\n // Calculate the total number of pages\n const totalPages = Math.ceil(containers.length / itemsPerPage);\n const [shouldAutoSelectNav, setShouldAutoSelectNav] = useState(true);\n const [hasIncreased, setHasIncreased] = useState(false);\n const currentItems = containers.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n const [questionTries, setQuestionTries] = useState({});\n// Добавьте новое состояние\nconst [wasNavChangedManually, setWasNavChangedManually] = useState(false);\nconst [autoSelectedContainers, setAutoSelectedContainers] = useState({})\nconst [buttonClass, setButtonClass] = useState({});\nconst token = localStorage.getItem('token');\nconsole.log = () => {};\n\nlet decoded = jwtDecode(token);\n\nlet user_id = decoded.sub;\nconst date = new Date(); // текущая дата и время\nconst year = date.getFullYear();\nconst month = String(date.getMonth() + 1).padStart(2, '0'); // добавляем ведущий ноль, если месяц меньше 10\nconst day = String(date.getDate()).padStart(2, '0'); // добавляем ведущий ноль, если день меньше 10\nconst hours = String(date.getHours()).padStart(2, '0');\nconst minutes = String(date.getMinutes()).padStart(2, '0');\nconst seconds = String(date.getSeconds()).padStart(2, '0');\nconst [duration, setDuration] = useState(0);\nconst formattedTimestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n// ВОПРОСЫ\nconst [modalOpen, setModalOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState('');\nconst [questions, setQuestions] = useState([]);\nconst [incorrectMessages, setIncorrectMessages] = useState('');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [tries, setTries] = useState(0);\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const [currentTime, setCurrentTime] = useState(0);\n\n//ТЕРМИНЫ\nconst [termins, setTermins] = useState([]);\n\nconst [answerCorrectness, setAnswerCorrectness] = useState({});\n//Doplinks\nconst [doplinks, setDoplinks] = useState([]);\n\nconst openModal = (imageURL) => {\n  setSelectedImage(imageURL);\n  setModalOpen(true);\n};\n\nconst closeModal = () => {\n  setSelectedImage('');\n  setModalOpen(false);\n};\n\n\nconst onStateChange = (event) => {\n  \n  if(videoRef.current) {\n  if (event.data === YouTube.PlayerState.PLAYING) {\n    const id = setInterval(() => {\n      videoRef.current.internalPlayer.getCurrentTime().then((time) => {\n        console.log(`Время воспроизведения: ${Math.floor(time)} секунд`);\n        // handleTimeUpdate(time);\n      });\n    }, 1000);\n    setIntervalId(id);\n  } else {\n    clearInterval(intervalId);\n  }\n\n  const interval = setInterval(() => {\n    if (videoRef.current && videoRef.current.internalPlayer.getCurrentTime) {\n      // handleTimeUpdate(currentTime);\n    }\n  }, 1000); // Проверка каждую секунду\n\n  return () => {\n    clearInterval(interval);\n  };\n}\n};\nuseEffect(() => {\n  handleTimeUpdate(currentTime); // someValue - это нужное вам значение, которое передается в handleTimeUpdate\n}, [currentPage, currentTime]);\nuseEffect(() => {\n  const checkResultAndShowVideo = async () => {\n    console.log(user_id);\n\n    try {\n      const checkResultResponse = await fetch('http://localhost:8888/tourschoolphp/Checkresulttoshowvideo.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: user_id,\n          title: titleWithSpaces,\n          course: courseWithSpaces,\n        }),\n      });\n\n      if (!checkResultResponse.ok) {\n        throw new Error('Ошибка при проверке результата для отображения видео');\n      }\n\n      const checkResultData = await checkResultResponse.json();\n\n      // Check if checkResultData is an array before accessing its elements\n      if (Array.isArray(checkResultData) && checkResultData.length > 0) {\n        // Вывод данных из PHP-скрипта в консоль\n        console.log('Response from PHP script:', checkResultData);\n\n        // Извлекаем значение available_at из первого элемента массива\n        const availableAt = checkResultData[0].available_at;\n        console.log('available_at:', availableAt);\n\n        // Получаем текущее время клиента\n        const clientTime = new Date();\n\n        // Получаем время с сервера и преобразуем его в объект Date (время сервера считаем в UTC)\n        const serverTimeUTC = new Date(availableAt);\n\n        // Получаем смещение временной зоны клиента\n        const clientTimezoneOffset = clientTime.getTimezoneOffset();\n\n        // Корректируем время сервера на смещение временной зоны клиента\n        const serverTime = new Date(serverTimeUTC.getTime() - clientTimezoneOffset * 60000);\n        console.log(serverTimeUTC);\n\n        // Сравниваем время с сервера и времени клиента\n        if (serverTime > clientTime) {\n          // Если время на сервере больше времени клиента, выполняем перенаправление\n          navigate('/courses');\n        } else {\n     \n        }\n      } \n    } catch (error) {\n      // console.error('Ошибка при проверке результата для отображения видео:', error);\n    }\n  };\n\n  checkResultAndShowVideo();\n}, [user_id, titleWithSpaces, courseWithSpaces]);\n\n\nuseEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:8888/tourschoolphp/testlesson.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при запросе данных');\n      }\n\n      const data = await response.json();\n\n      // Check if data is an array before mapping over it\n      if (Array.isArray(data)) {\n        // Преобразовать данные в ожидаемый формат и перемешать варианты ответов\n        const formattedQuestions = data.map((question) => ({\n          ...question,\n          options: shuffleArray([\n            question.incorrect_answer1,\n            question.incorrect_answer2,\n            question.incorrect_answer3,\n            question.correct_answer,\n          ]),\n        }));\n\n        setQuestions(formattedQuestions);\n      }\n    } catch (error) {\n      console.error('Ошибка при отправке запроса:', error);\n    }\n  };\n\n  fetchData();\n}, [titleWithSpaces]);\n\n\n \n  \n\n\n  \n// Измените handleNavClick, чтобы устанавливать wasNavChangedManually в true\nconst handleNavClick = (navType) => {\n  setIsNavChangedManually(true);\n  setWasNavChangedManually(true);\n  setSelectedNav(navType);\n};\nuseEffect(() => {\n  console.log(`Current Page: ${currentPage}, Selected Nav: ${selectedNav}`);\n  console.log(videoRef.current);\n \n}, [currentPage, selectedNav]);\n\n// Измените handleTimeUpdate, чтобы проверять wasNavChangedManually, а не isNavChangedManually\nconst handleTimeUpdate = (aaa, curcur) => {\n \n\n    const timeToEnd = duration - aaa;\n\n    // Показать кнопку за N секунд до окончания видео\n    if (timeToEnd <= secondsBeforeEndToShowButton && !videoEnding) {\n      setVideoEnding(true);\n    }\n    setQuestions((questions) => {\n      let newSelectedNav = selectedNav;\n      let newcurrentQuestionIndex = currentQuestionIndex;\n  \n      const updatedQuestions = questions.map((question, index) => {\n        if (!question.isShuffled) {\n          question.options = shuffleArray(question.options);\n          question.isShuffled = true;\n        }\n        if (question.isVisible) {\n          setSelectedNav(question.type);\n          videoRef.current.internalPlayer.pauseVideo();\n        \n        }\n  \n    \n        const timeIn = timeToSeconds(question.time_in);\n        const isVisible = aaa >= timeIn;\n  \n       \n  if (isVisible && !question.isVisible)  {\n          // Check if the question type is already auto-selected\n          if (!autoSelectedContainers[question.id]) {\n            newSelectedNav = question.type;\n            // Update autoSelectedContainers\n            setAutoSelectedContainers((autoSelectedContainers) => ({\n              ...autoSelectedContainers,\n              [question.id]: true,\n            }));\n          }\n          newcurrentQuestionIndex = index;\n        }\n        if (newSelectedNav !== selectedNav) {\n          setSelectedNav(newSelectedNav);\n        }\n        return { ...question, isVisible };\n      });\n    \n      return updatedQuestions;\n    })\n    setContainers((containers) => {\n      let newSelectedNav = selectedNav;\n      let newCurrentContainerIndex = currentContainerIndex;\n  \n      const updatedContainers = containers.map((container, index) => {\n      \n        const timeIn = timeToSeconds(container.time_in);\n        const isVisible = aaa >= timeIn;\n  \n        if (isVisible && !container.isVisible) {\n          if (index !== newCurrentContainerIndex) {\n            // Проверьте, был ли контейнер уже автоматически выбран\n            if (!autoSelectedContainers[container.id]) {\n              newSelectedNav = container.type;\n              // Обновите autoSelectedContainers\n              setAutoSelectedContainers((autoSelectedContainers) => ({\n                ...autoSelectedContainers,\n                [container.id]: true,\n              }));\n            }\n            newCurrentContainerIndex = index;\n          }\n        }\n       \n        return { ...container, isVisible };\n  \n        \n      });\n  \n      if (newSelectedNav !== selectedNav) {\n        setSelectedNav(newSelectedNav);\n      }\n    \n      setCurrentContainerIndex(newCurrentContainerIndex);\n      if (newCurrentContainerIndex !== lastContainerIndex) {\n        setCurrentContainerIndex(newCurrentContainerIndex);\n        setLastContainerIndex(newCurrentContainerIndex);\n      }\n      \n      if (newCurrentContainerIndex + 1 > currentPage * itemsPerPage) {\n        setCurrentPage((prevPage) => prevPage + 0.5);\n      }\n      \n      if (videoRef.current) {\n        console.log(newCurrentContainerIndex, 'time', aaa, \"item\", itemsPerPage, \"currentPage\", currentPage);\n      }\n  \n      setLastContainerIndex(newCurrentContainerIndex);\n  \n      return updatedContainers;\n    });\n  setTermins((termins) => {\n    let newSelectedNav = selectedNav;\n    let newCurrentContainerIndex = currentContainerIndex;\n\n    const updatedContainers = termins.map((termin, index) => {\n    \n      const timeIn = timeToSeconds(termin.time_in);\n      const isVisible = currentTime >= timeIn;\n\n      if (isVisible && !termin.isVisible) {\n        if (index !== newCurrentContainerIndex) {\n          // Проверьте, был ли контейнер уже автоматически выбран\n          if (!autoSelectedContainers[termin.id]) {\n            newSelectedNav = termin.type;\n            // Обновите autoSelectedContainers\n            setAutoSelectedContainers((autoSelectedContainers) => ({\n              ...autoSelectedContainers,\n              [termin.id]: true,\n            }));\n          }\n          newCurrentContainerIndex = index;\n        }\n      }\n   \n     \n      return { ...termin, isVisible };\n\n      \n    });\n\n    if (newSelectedNav !== selectedNav) {\n      setSelectedNav(newSelectedNav);\n    }\n  \n    setCurrentContainerIndex(newCurrentContainerIndex);\n    if (newCurrentContainerIndex !== lastContainerIndex) {\n      setCurrentContainerIndex(newCurrentContainerIndex);\n      setLastContainerIndex(newCurrentContainerIndex);\n    }\n    \n    if (newCurrentContainerIndex + 1 > currentPage * itemsPerPage) {\n      setCurrentPage((currentPage) => currentPage + 0.5);\n    }\n    \n\n    setLastContainerIndex(newCurrentContainerIndex);\n\n    return updatedContainers;\n  });\n\n};\n\nconst handleVideoEnd = () => {\n  setVideoEnded(true);\n  setVideoEnding(false); // Сбросить состояние, чтобы не показывать кнопку после окончания видео\n};\n\n// Измените useEffect, чтобы сбрасывать wasNavChangedManually обратно в false, когда видео достигает конца\nuseEffect(() => {\n  if (videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n    currentTimePromise.then((currentTime) => {\n      if (videoRef.current && currentTime >= duration) {\n        setWasNavChangedManually(false);\n      }\n    })\n  }\n}, [videoRef.current]);\n\nuseEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch('http://localhost:8888/tourschoolphp/lessonvideo.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces, course: courseWithSpaces }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при запросе данных');\n      }\n\n      const responseBody = await response.text();\n      const data = JSON.parse(responseBody);\n      setResponseData(data);\n    } catch (error) {\n      console.error('Ошибка при отправке запроса:', error);\n    } finally {\n      // Устанавливаем статус загрузки в false после завершения запроса\n      setLoading(false);\n  }\n\n    try {\n      const response = await fetch('http://localhost:8888/tourschoolphp/containersmodel.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n  \n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setContainers(data.map((container) => ({ ...container, key: container.id })));\n      } catch (error) {\n        // console.error('Ошибка при отправке запроса:', error);\n      }\n\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/termins.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n  \n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setTermins(data.map((termin) => ({ ...termin, key: termin.id })));\n      } catch (error) {\n        \n      }\n\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/doplink.php', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n  \n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setDoplinks(data.map((doplink) => ({ ...doplink, key: doplink.id })));\n      } catch (error) {\n        console.error('Ошибка при отправке запроса:', error);\n      }\n\n    };\n    fetchData();\n\n    // function onPlayerReady(event) {\n    //   const intervalId = setInterval(updateTime, 1000); // обновляйте время каждую секунду\n  \n    //   // Очистите интервал при размонтировании\n    //   return () => {\n    //     clearInterval(intervalId);\n    //   };\n    // }\n  \n    // // Обновите время воспроизведения\n    // function updateTime() {\n    //   const currentTime = videoRef.getCurrentTime();\n    //   handleTimeUpdate(currentTime); // здесь ваша функция handleTimeUpdate\n    // }\n  \n  \n\n    }, [titleWithSpaces, containers, termins, videoEnding]);\n  \n\n    \n  const timeToSeconds = (time) => {\n    let parts = time.split(':');\n    return (+parts[0]) * 60 * 60 + (+parts[1]) * 60 + (+parts[2]);\n  }\n\n  \n  const handleOptionClick = (option, questionId, index) => {\n    const currentQuestion = questions.find((q) => q.id === questionId);\n    const isAnswerCorrect = option === currentQuestion.correct_answer;\n    setAnswerCorrectness(prevState => ({\n      ...prevState,\n      [`${questionId}-${index}`]: isAnswerCorrect,\n  }));\n  setButtonClass(prevButtonClass => ({\n      ...prevButtonClass,\n      [`${questionId}-${index}`]: isAnswerCorrect ? 'buttonindex-correct' : 'buttonindex-incorrect',\n  }));\n\n    // Update the class name for the clicked button based on the correctness of the answer\n    const updatedOptions = [...questions[currentQuestionIndex].options];\n  \n    setQuestions((prevQuestions) => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[currentQuestionIndex] = {\n        ...updatedQuestions[currentQuestionIndex],\n        options: updatedOptions,\n      };\n      return updatedQuestions;\n    });\n  \n    // Rest of your code remains unchanged\n    setQuestionTries((prevTries) => {\n      const currentTries = prevTries[questionId] || { total: 0, lastAttempt: 0 };\n  \n      const updatedTries = {\n        ...prevTries,\n        [questionId]: {\n          total: currentTries.total + 1,\n          lastAttempt: isAnswerCorrect ? currentTries.lastAttempt + 1 : currentTries.lastAttempt,\n        },\n      };\n  \n      if (!isAnswerCorrect && currentTries.total >= 2) {\n        setIncorrectMessages((prevMessages) => ({\n          ...prevMessages,\n          [questionId]: `Неправильный ответ. Правильный ответ: ${currentQuestion.correct_answer}`,\n        }));\n  \n        // Do not reset the total count here\n        updatedTries[questionId] = { total: currentTries.total, lastAttempt: 0 };\n      } else {\n        setIncorrectMessages((prevMessages) => ({\n          ...prevMessages,\n          [questionId]: isAnswerCorrect ? '' : 'Неправильный ответ. Попробуйте еще раз',\n        }));\n  \n        if (isAnswerCorrect) {\n          setQuestions((prevQuestions) => prevQuestions.filter((q) => q.id !== currentQuestion.id));\n          setCurrentQuestionIndex((prevIndex) => {\n            const nextIndex = prevIndex + 1;\n            return nextIndex < questions.length ? nextIndex : 0;\n          });\n          videoRef.current.internalPlayer.playVideo();\n  \n          // Send data to the server only for correct answers\n          fetch('http://localhost:8888/tourschoolphp/testresult.php', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              user: user_id,\n              testid: currentQuestion.id,\n              tries: updatedTries[questionId]?.total || 0,\n              timestamp: formattedTimestamp,\n            }),\n          })\n            .then(response => {\n              if (!response.ok) {\n                throw new Error('Ошибка при сохранении ответа на сервере');\n              }\n              return response.text();\n            })\n            .then(data => {\n              console.log('Server response:', data);\n              return JSON.parse(data);\n            })\n            .catch(error => {\n              console.error('Ошибка при отправке запроса:', error);\n            });\n        }\n      }\n  \n      return updatedTries;\n    });\n  \n  \n    if (isAnswerCorrect) {\n      setSuccessfulTries((prev) => ({ ...prev, [questionId]: (prev[questionId] || 0) + 1 }));\n    } else {\n      setUnsuccessfulTries((prev) => ({ ...prev, [questionId]: (prev[questionId] || 0) + 1 }));\n    };\n\n    if (questions.length === 1) {\n      // If there are no more questions, set allTestsPassed to true\n      setAllTestsPassed(true);\n    }\n  };\n\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if(videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n  currentTimePromise.then((currentTime) => {\n    containers.forEach((container) => {\n      let timeIn = timeToSeconds(container.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n  \n   \n    });\n  \n    if (videoRef.current && currentTime > maxTimeOut) {\n      setIsNavChangedManually(false);\n      setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n    }\n  })\n}\n  }, [containers, videoRef.current, isNavChangedManually]);\n  const videoOptions = {\n    height: '500px',      // Высота плеера\n    width: '100%',       // Ширина плеера\n    playerVars: {       // Параметры плеера\n      autoplay: 1,      // Автовоспроизведение видео\n      controls: 1,      // Отображение элементов управления\n      showinfo: 0,      // Отображение информации о видео\n      modestbranding: 0 // Удаление логотипа YouTube\n    }\n  };\n\n\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if(videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n  currentTimePromise.then((currentTime) => {\n    termins.forEach((\n      termin) => {\n      let timeIn = timeToSeconds(termin.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n  \n   \n    });\n  \n    if (videoRef.current && currentTime > maxTimeOut) {\n      setIsNavChangedManually(false);\n      setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n    }\n  })\n}\n  }, [termins, videoRef.current, isNavChangedManually]);\n\n  \n  \n  useEffect(() => {\n  \n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if(videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n  currentTimePromise.then((currentTime) => {\n    questions.forEach((\n      question) => {\n      let timeIn = timeToSeconds(question.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n  \n   \n    });\n  \n    if (videoRef.current && currentTime > maxTimeOut) {\n      setIsNavChangedManually(false);\n      setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n    }\n  })\n}\n  }, [questions, videoRef.current, isNavChangedManually]);\n  \n  const handleFinishLesson = () => {\n    fetch('http://localhost:8888/tourschoolphp/finishlesson.php', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: user_id,\n        lesson: titleWithSpaces,\n        date: formattedTimestamp,\n      })\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Ошибка при сохранении ответа на сервере');\n      }\n      return response.text();\n    })\n    .then(data => {\n      console.log('Server response:', data);\n      return JSON.parse(data);\n    })\n    .catch(error => {\n      console.error('Ошибка при отправке запроса:', error);\n    });\n}\n\nuseEffect(() => {\n  const fetchCurrentTime = async () => {\n    if (videoRef.current && videoRef.current.internalPlayer && videoRef.current.internalPlayer.getCurrentTime) {\n      const time = await videoRef.current.internalPlayer.getCurrentTime();\n      setCurrentTime(time);\n    }\n\n    if (videoRef.current && videoRef.current.internalPlayer && videoRef.current.internalPlayer.getDuration) {\n      const duration = await videoRef.current.internalPlayer.getDuration();\n      setDuration(duration);\n    }\n  };\n\n  fetchCurrentTime();\n  const intervalId = setInterval(fetchCurrentTime, 1000); // Update every second\n\n  return () => clearInterval(intervalId); // Clean up on unmount\n}, []);\n\nif (loading) {\n  return <div>Загрузка...</div>;\n} \n\n  return (\n    <div className='connews'>\n        <div className='containerlesson'>\n      <h1>{titleWithSpaces}</h1>\n      <div className='containervideoimg'>\n        \n      \n      {videoRef && responseData && (\n        <div className='videoless'>\n  <YouTube\n\n    videoId={responseData}\n    opts={videoOptions}\n    onStateChange={onStateChange}\n    ref={videoRef}\n  />\n  </div>\n)}\n                                                                                                                                                                                                              \n      {/* <img className='imageless' src=\"/egypt.png\"></img> */}\n      </div>\n      <div className='containerwithinfo'>\n        <div className='linewithtypes'>\n        <div className={`textnav ${selectedNav === 'Термины' || (!isManualNav === 'Термины') ? 'active' : ''}`} onClick={() => handleNavClick('Термины')}>Термины</div>\n        <div className={`textnav ${selectedNav === 'Тест' || (!isManualNav === 'Тест') ? 'active' : ''}`} onClick={() => handleNavClick('Тест')}>Тест</div>\n            <div className={`textnav ${selectedNav === 'Информация' || (!isManualNav  === 'Информация') ? 'active' : ''}`} onClick={() => handleNavClick('Информация')}>Информация</div>\n            <div className={`textnav ${selectedNav === 'Дополнительная информация' ? 'active' : ''}`} onClick={() => handleNavClick('Дополнительная информация')}>Ссылки</div>\n        </div>\n        {allTestsPassed && videoEnding && (\n        <a href={`/courses/${title}/${lesson}/summary-page`}>\n<button \n  className='urokend'\n  onClick={handleFinishLesson}\n>\n  Завершить урок\n</button>\n</a>\n\n\n)}\n        {questions.map((question) => {\n          if (videoRef.current) {\n            let timeIn = timeToSeconds(question.time_in);\n            let isVisible = videoRef.current && currentTime >= timeIn;\n          \n        \n  // Only render the question if it's both visible and its type matches the selected nav\n\n  if (isVisible && (selectedNav === question.type || (!isManualNav === question.type))) {\n    \n    return (\n\n    <React.Fragment key={question.id}>\n        <div className='testinfo' style={{ display: 'flex', margin: '5px 0' }}>\n         \n          <h2>{question.question}</h2>\n          <div className='buttoncontless'>\n          {question.options.map((option, index) => (\n    <button\n    className={buttonClass[`${question.id}-${index}`] || \"buttonindex\"}\n    key={index}\n    onClick={() => handleOptionClick(option, question.id, index)}\n>\n    {option}\n</button>\n\n            ))}\n\n        </div>\n        </div>\n        <br />\n      </React.Fragment>\n    );\n  }\n\n  return null;\n\n}\n})}\n\n  \n    \n{currentItems.map((container) => {\n  let timeIn = timeToSeconds(container.time_in);\n  let isVisible = videoRef.current && currentTime >= timeIn;\n\n  if (isVisible && (selectedNav === container.type || (!isManualNav === container.type))) {\n    if (isNavChangedManually && selectedNav !== container.type) {\n      return null;\n    }\n\n    // Проверка, является ли текст ссылкой на изображение\n    const imageFormats = ['.jpg', '.png', '.jpeg', '.gif', '.bmp', '.svg', '.webp'];\n    const isImage = imageFormats.some(format => container.text.includes(format));\n\n    return (\n      <>\n        <React.Fragment key={container.id}>\n          <div\n            className='textinfo'\n            style={{\n              display: 'block',\n              margin: '10px 0', // Add top and bottom margin of 10 pixels\n            }}\n          >\n            {isImage ? (\n          <img\n          src={`http://localhost:8888/tourschoolphp/${container.text}`}\n          alt=\"123123\"\n          width=\"400\"\n          onClick={() => openModal(`http://localhost:8888/tourschoolphp/${container.text}`)}\n        />\n\n            ) : (\n              container.text.split('\\n').map((line, index) => (\n                <React.Fragment key={index}>\n                  {line}\n                  <br />\n                </React.Fragment>\n              ))\n            )}\n          </div>\n        </React.Fragment>\n      </>\n    );\n  }\n  return null;\n})}\n\n\n  {termins.map((termin) => {\n      let timeIn = timeToSeconds(termin.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn;\n\n  if (isVisible && (selectedNav === termin.type || (!isManualNav === termin.type))) {\n    // Если пользователь вручную переключился на другой блок, не обновляйте блок автоматически\n    if (isNavChangedManually && selectedNav !== termin.type) {\n      return null;\n    }\n\n    return (\n      <React.Fragment key={termin.id}>\n        <div\n          className='textinfo'\n          style={{\n            display: 'block',\n            margin: '5px 0', // Add top and bottom margin of 10 pixels\n          }}\n        >\n      \n          {termin.text}\n        </div>\n        <br />\n      </React.Fragment>\n      \n    );\n  }\n  return null;\n})\n}\n{}\n{selectedNav === 'Дополнительная информация' &&\ndoplinks.map((doplink) => {\n // Если selectedNav - это переменная, которая должна быть обновлена, необходимо использовать '=' вместо ';'\n  return (\n    <div key={doplink.id}>\n      <div\n        className='textinfo'\n        style={{\n          display: 'block',\n          margin: '5px 0', // Add top and bottom margin of 10 pixels\n        }}\n      >\n        <a href={doplink.text}>{doplink.text}</a>  \n      </div>\n    </div>\n  );\n})}\n\n{modalOpen && (\n          <div className=\"modal7\">\n            <span className=\"close7\" onClick={closeModal}>&times;</span>\n            <img className=\"modal-content7\" src={selectedImage} alt=\"Enlarged Image\" />\n          </div>\n        )}\n\n<Navpanmini/>\n</div>\n</div>\n</div>\n);\n}\n\nexport default LessonListPage; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,EAAEC,WAAW,QAAQ,OAAO;AACvE,SAASC,SAAS,QAAQ,kBAAkB;AAC5C,SAASC,SAAS,QAAQ,YAAY;AACtC,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAEC,MAAM,QAAQ,kBAAkB;AAC/E,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAO,kBAAkB;AAEzB,SAASC,WAAW,QAAQ,kBAAkB,CAAC,CAAC;AAChD,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACpC,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACS,eAAe,EAAEC,kBAAkB,CAAC,GAAGtB,QAAQ,CAAC,IAAI,CAAC;EAC5D,MAAM,CAACuB,WAAW,EAAEC,cAAc,CAAC,GAAGxB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM;IAAEyB,KAAK;IAAEC;EAAO,CAAC,GAAGtB,SAAS,CAAC,CAAC;EACrC,MAAMuB,eAAe,GAAGD,MAAM,CAACE,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACjD,MAAMC,gBAAgB,GAAGJ,KAAK,CAACG,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;EACjD,MAAM,CAACE,YAAY,EAAEC,eAAe,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACgC,OAAO,EAAEC,UAAU,CAAC,GAAGjC,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkC,WAAW,EAAEC,cAAc,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACoC,4BAA4B,EAAEC,+BAA+B,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACpF,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACwC,cAAc,EAAEC,iBAAiB,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EAC3D,MAAM,CAAC0C,UAAU,EAAEC,aAAa,CAAC,GAAG3C,QAAQ,CAAC,IAAI,CAAC;EAElD,MAAM,CAAC4C,UAAU,EAAEC,aAAa,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM8C,QAAQ,GAAG5C,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAM,CAAC6C,WAAW,EAAEC,cAAc,CAAC,GAAGhD,QAAQ,CAAC,YAAY,CAAC;EAC5D,MAAM,CAACiD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGlD,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACmD,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGpD,QAAQ,CAAC,CAAC,CAAC;EACrE,MAAM,CAACqD,WAAW,EAAEC,cAAc,CAAC,GAAGtD,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAMuD,YAAY,GAAG,CAAC,CAAC,CAAC;EACxB,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGzD,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC1D,MAAM,CAAC0D,iBAAiB,EAAEC,oBAAoB,CAAC,GAAG3D,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC4D,kBAAkB,EAAEC,qBAAqB,CAAC,GAAG7D,QAAQ,CAAC,IAAI,CAAC;EAClE,MAAM,CAAC8D,cAAc,EAAEC,iBAAiB,CAAC,GAAG/D,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC3D;EACA,MAAMgE,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACtB,UAAU,CAACuB,MAAM,GAAGZ,YAAY,CAAC;EAC9D,MAAM,CAACa,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGrE,QAAQ,CAAC,IAAI,CAAC;EACpE,MAAM,CAACsE,YAAY,EAAEC,eAAe,CAAC,GAAGvE,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAMwE,YAAY,GAAG5B,UAAU,CAAC6B,KAAK,CAAC,CAACpB,WAAW,GAAG,CAAC,IAAIE,YAAY,EAAEF,WAAW,GAAGE,YAAY,CAAC;EACnG,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAG3E,QAAQ,CAAC,CAAC,CAAC,CAAC;EACvD;EACA,MAAM,CAAC4E,qBAAqB,EAAEC,wBAAwB,CAAC,GAAG7E,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAAC8E,sBAAsB,EAAEC,yBAAyB,CAAC,GAAG/E,QAAQ,CAAC,CAAC,CAAC,CAAC;EACxE,MAAM,CAACgF,WAAW,EAAEC,cAAc,CAAC,GAAGjF,QAAQ,CAAC,CAAC,CAAC,CAAC;EAClD,MAAMkF,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3CC,OAAO,CAACC,GAAG,GAAG,MAAM,CAAC,CAAC;EAEtB,IAAIC,OAAO,GAAGlF,SAAS,CAAC6E,KAAK,CAAC;EAE9B,IAAIM,OAAO,GAAGD,OAAO,CAACE,GAAG;EACzB,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAAC,CAAC;EACzB,MAAMC,IAAI,GAAGF,IAAI,CAACG,WAAW,CAAC,CAAC;EAC/B,MAAMC,KAAK,GAAGC,MAAM,CAACL,IAAI,CAACM,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EAC5D,MAAMC,GAAG,GAAGH,MAAM,CAACL,IAAI,CAACS,OAAO,CAAC,CAAC,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;EACrD,MAAMG,KAAK,GAAGL,MAAM,CAACL,IAAI,CAACW,QAAQ,CAAC,CAAC,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACtD,MAAMK,OAAO,GAAGP,MAAM,CAACL,IAAI,CAACa,UAAU,CAAC,CAAC,CAAC,CAACN,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAMO,OAAO,GAAGT,MAAM,CAACL,IAAI,CAACe,UAAU,CAAC,CAAC,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC1D,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAG3G,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM4G,kBAAkB,GAAI,GAAEhB,IAAK,IAAGE,KAAM,IAAGI,GAAI,IAAGE,KAAM,IAAGE,OAAQ,IAAGE,OAAQ,EAAC;EACnF;EACA,MAAM,CAACK,SAAS,EAAEC,YAAY,CAAC,GAAG9G,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAAC+G,aAAa,EAAEC,gBAAgB,CAAC,GAAGhH,QAAQ,CAAC,EAAE,CAAC;EACxD,MAAM,CAACiH,SAAS,EAAEC,YAAY,CAAC,GAAGlH,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACmH,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpH,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACqH,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGtH,QAAQ,CAAC,CAAC,CAAC;EACnE,MAAM,CAACuH,KAAK,EAAEC,QAAQ,CAAC,GAAGxH,QAAQ,CAAC,CAAC,CAAC;EACrC,MAAMyH,YAAY,GAAIC,KAAK,IAAK;IAC9B,KAAK,IAAIC,CAAC,GAAGD,KAAK,CAACvD,MAAM,GAAG,CAAC,EAAEwD,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MACzC,MAAMC,CAAC,GAAG3D,IAAI,CAAC4D,KAAK,CAAC5D,IAAI,CAAC6D,MAAM,CAAC,CAAC,IAAIH,CAAC,GAAG,CAAC,CAAC,CAAC;MAC7C,CAACD,KAAK,CAACC,CAAC,CAAC,EAAED,KAAK,CAACE,CAAC,CAAC,CAAC,GAAG,CAACF,KAAK,CAACE,CAAC,CAAC,EAAEF,KAAK,CAACC,CAAC,CAAC,CAAC;IAC7C;IACA,OAAOD,KAAK;EACd,CAAC;EACD,MAAM,CAACK,WAAW,EAAEC,cAAc,CAAC,GAAGhI,QAAQ,CAAC,CAAC,CAAC;;EAEnD;EACA,MAAM,CAACiI,OAAO,EAAEC,UAAU,CAAC,GAAGlI,QAAQ,CAAC,EAAE,CAAC;EAE1C,MAAM,CAACmI,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpI,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC9D;EACA,MAAM,CAACqI,QAAQ,EAAEC,WAAW,CAAC,GAAGtI,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMuI,SAAS,GAAIC,QAAQ,IAAK;IAC9BxB,gBAAgB,CAACwB,QAAQ,CAAC;IAC1B1B,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,MAAM2B,UAAU,GAAGA,CAAA,KAAM;IACvBzB,gBAAgB,CAAC,EAAE,CAAC;IACpBF,YAAY,CAAC,KAAK,CAAC;EACrB,CAAC;EAGD,MAAM4B,aAAa,GAAIC,KAAK,IAAK;IAE/B,IAAG7F,QAAQ,CAAC8F,OAAO,EAAE;MACrB,IAAID,KAAK,CAACE,IAAI,KAAKhI,OAAO,CAACiI,WAAW,CAACC,OAAO,EAAE;QAC9C,MAAMC,EAAE,GAAGC,WAAW,CAAC,MAAM;UAC3BnG,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,CAAC,CAAC,CAACC,IAAI,CAAEC,IAAI,IAAK;YAC9DhE,OAAO,CAACC,GAAG,CAAE,0BAAyBrB,IAAI,CAAC4D,KAAK,CAACwB,IAAI,CAAE,SAAQ,CAAC;YAChE;UACF,CAAC,CAAC;QACJ,CAAC,EAAE,IAAI,CAAC;QACR1G,aAAa,CAACqG,EAAE,CAAC;MACnB,CAAC,MAAM;QACLM,aAAa,CAAC5G,UAAU,CAAC;MAC3B;MAEA,MAAM6G,QAAQ,GAAGN,WAAW,CAAC,MAAM;QACjC,IAAInG,QAAQ,CAAC8F,OAAO,IAAI9F,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,EAAE;UACtE;QAAA;MAEJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;;MAEV,OAAO,MAAM;QACXG,aAAa,CAACC,QAAQ,CAAC;MACzB,CAAC;IACH;EACA,CAAC;EACDtJ,SAAS,CAAC,MAAM;IACduJ,gBAAgB,CAACzB,WAAW,CAAC,CAAC,CAAC;EACjC,CAAC,EAAE,CAAC1E,WAAW,EAAE0E,WAAW,CAAC,CAAC;EAC9B9H,SAAS,CAAC,MAAM;IACd,MAAMwJ,uBAAuB,GAAG,MAAAA,CAAA,KAAY;MAC1CpE,OAAO,CAACC,GAAG,CAACE,OAAO,CAAC;MAEpB,IAAI;QACF,MAAMkE,mBAAmB,GAAG,MAAMC,KAAK,CAAC,gEAAgE,EAAE;UACxGC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YACnBxE,OAAO,EAAEA,OAAO;YAChB/D,KAAK,EAAEE,eAAe;YACtBsI,MAAM,EAAEpI;UACV,CAAC;QACH,CAAC,CAAC;QAEF,IAAI,CAAC6H,mBAAmB,CAACQ,EAAE,EAAE;UAC3B,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;QACzE;QAEA,MAAMC,eAAe,GAAG,MAAMV,mBAAmB,CAACW,IAAI,CAAC,CAAC;;QAExD;QACA,IAAIC,KAAK,CAACC,OAAO,CAACH,eAAe,CAAC,IAAIA,eAAe,CAACjG,MAAM,GAAG,CAAC,EAAE;UAChE;UACAkB,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE8E,eAAe,CAAC;;UAEzD;UACA,MAAMI,WAAW,GAAGJ,eAAe,CAAC,CAAC,CAAC,CAACK,YAAY;UACnDpF,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEkF,WAAW,CAAC;;UAEzC;UACA,MAAME,UAAU,GAAG,IAAI/E,IAAI,CAAC,CAAC;;UAE7B;UACA,MAAMgF,aAAa,GAAG,IAAIhF,IAAI,CAAC6E,WAAW,CAAC;;UAE3C;UACA,MAAMI,oBAAoB,GAAGF,UAAU,CAACG,iBAAiB,CAAC,CAAC;;UAE3D;UACA,MAAMC,UAAU,GAAG,IAAInF,IAAI,CAACgF,aAAa,CAACI,OAAO,CAAC,CAAC,GAAGH,oBAAoB,GAAG,KAAK,CAAC;UACnFvF,OAAO,CAACC,GAAG,CAACqF,aAAa,CAAC;;UAE1B;UACA,IAAIG,UAAU,GAAGJ,UAAU,EAAE;YAC3B;YACAtJ,QAAQ,CAAC,UAAU,CAAC;UACtB,CAAC,MAAM,CAEP;QACF;MACF,CAAC,CAAC,OAAO4J,KAAK,EAAE;QACd;MAAA;IAEJ,CAAC;IAEDvB,uBAAuB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACjE,OAAO,EAAE7D,eAAe,EAAEE,gBAAgB,CAAC,CAAC;EAGhD5B,SAAS,CAAC,MAAM;IACd,MAAMgL,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAAC,oDAAoD,EAAE;UACjFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEtI,MAAM,EAAEC;UAAgB,CAAC;QAClD,CAAC,CAAC;QAEF,IAAI,CAACuJ,QAAQ,CAAChB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEA,MAAMtB,IAAI,GAAG,MAAMqC,QAAQ,CAACb,IAAI,CAAC,CAAC;;QAElC;QACA,IAAIC,KAAK,CAACC,OAAO,CAAC1B,IAAI,CAAC,EAAE;UACvB;UACA,MAAMsC,kBAAkB,GAAGtC,IAAI,CAACuC,GAAG,CAAEC,QAAQ,KAAM;YACjD,GAAGA,QAAQ;YACXC,OAAO,EAAE7D,YAAY,CAAC,CACpB4D,QAAQ,CAACE,iBAAiB,EAC1BF,QAAQ,CAACG,iBAAiB,EAC1BH,QAAQ,CAACI,iBAAiB,EAC1BJ,QAAQ,CAACK,cAAc,CACxB;UACH,CAAC,CAAC,CAAC;UAEHxE,YAAY,CAACiE,kBAAkB,CAAC;QAClC;MACF,CAAC,CAAC,OAAOH,KAAK,EAAE;QACd3F,OAAO,CAAC2F,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDC,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACtJ,eAAe,CAAC,CAAC;;EAQrB;EACA,MAAMgK,cAAc,GAAIC,OAAO,IAAK;IAClC1I,uBAAuB,CAAC,IAAI,CAAC;IAC7B2B,wBAAwB,CAAC,IAAI,CAAC;IAC9B7B,cAAc,CAAC4I,OAAO,CAAC;EACzB,CAAC;EACD3L,SAAS,CAAC,MAAM;IACdoF,OAAO,CAACC,GAAG,CAAE,iBAAgBjC,WAAY,mBAAkBN,WAAY,EAAC,CAAC;IACzEsC,OAAO,CAACC,GAAG,CAACxC,QAAQ,CAAC8F,OAAO,CAAC;EAE/B,CAAC,EAAE,CAACvF,WAAW,EAAEN,WAAW,CAAC,CAAC;;EAE9B;EACA,MAAMyG,gBAAgB,GAAGA,CAACqC,GAAG,EAAEC,MAAM,KAAK;IAGtC,MAAMC,SAAS,GAAGrF,QAAQ,GAAGmF,GAAG;;IAEhC;IACA,IAAIE,SAAS,IAAI3J,4BAA4B,IAAI,CAACF,WAAW,EAAE;MAC7DC,cAAc,CAAC,IAAI,CAAC;IACtB;IACA+E,YAAY,CAAED,SAAS,IAAK;MAC1B,IAAI+E,cAAc,GAAGjJ,WAAW;MAChC,IAAIkJ,uBAAuB,GAAG5E,oBAAoB;MAElD,MAAM6E,gBAAgB,GAAGjF,SAAS,CAACmE,GAAG,CAAC,CAACC,QAAQ,EAAEc,KAAK,KAAK;QAC1D,IAAI,CAACd,QAAQ,CAACe,UAAU,EAAE;UACxBf,QAAQ,CAACC,OAAO,GAAG7D,YAAY,CAAC4D,QAAQ,CAACC,OAAO,CAAC;UACjDD,QAAQ,CAACe,UAAU,GAAG,IAAI;QAC5B;QACA,IAAIf,QAAQ,CAACgB,SAAS,EAAE;UACtBrJ,cAAc,CAACqI,QAAQ,CAACiB,IAAI,CAAC;UAC7BxJ,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACqD,UAAU,CAAC,CAAC;QAE9C;QAGA,MAAMC,MAAM,GAAGC,aAAa,CAACpB,QAAQ,CAACqB,OAAO,CAAC;QAC9C,MAAML,SAAS,GAAGR,GAAG,IAAIW,MAAM;QAGrC,IAAIH,SAAS,IAAI,CAAChB,QAAQ,CAACgB,SAAS,EAAG;UAC/B;UACA,IAAI,CAACvH,sBAAsB,CAACuG,QAAQ,CAACrC,EAAE,CAAC,EAAE;YACxCgD,cAAc,GAAGX,QAAQ,CAACiB,IAAI;YAC9B;YACAvH,yBAAyB,CAAED,sBAAsB,KAAM;cACrD,GAAGA,sBAAsB;cACzB,CAACuG,QAAQ,CAACrC,EAAE,GAAG;YACjB,CAAC,CAAC,CAAC;UACL;UACAiD,uBAAuB,GAAGE,KAAK;QACjC;QACA,IAAIH,cAAc,KAAKjJ,WAAW,EAAE;UAClCC,cAAc,CAACgJ,cAAc,CAAC;QAChC;QACA,OAAO;UAAE,GAAGX,QAAQ;UAAEgB;QAAU,CAAC;MACnC,CAAC,CAAC;MAEF,OAAOH,gBAAgB;IACzB,CAAC,CAAC;IACFrJ,aAAa,CAAED,UAAU,IAAK;MAC5B,IAAIoJ,cAAc,GAAGjJ,WAAW;MAChC,IAAI4J,wBAAwB,GAAGxJ,qBAAqB;MAEpD,MAAMyJ,iBAAiB,GAAGhK,UAAU,CAACwI,GAAG,CAAC,CAACyB,SAAS,EAAEV,KAAK,KAAK;QAE7D,MAAMK,MAAM,GAAGC,aAAa,CAACI,SAAS,CAACH,OAAO,CAAC;QAC/C,MAAML,SAAS,GAAGR,GAAG,IAAIW,MAAM;QAE/B,IAAIH,SAAS,IAAI,CAACQ,SAAS,CAACR,SAAS,EAAE;UACrC,IAAIF,KAAK,KAAKQ,wBAAwB,EAAE;YACtC;YACA,IAAI,CAAC7H,sBAAsB,CAAC+H,SAAS,CAAC7D,EAAE,CAAC,EAAE;cACzCgD,cAAc,GAAGa,SAAS,CAACP,IAAI;cAC/B;cACAvH,yBAAyB,CAAED,sBAAsB,KAAM;gBACrD,GAAGA,sBAAsB;gBACzB,CAAC+H,SAAS,CAAC7D,EAAE,GAAG;cAClB,CAAC,CAAC,CAAC;YACL;YACA2D,wBAAwB,GAAGR,KAAK;UAClC;QACF;QAEA,OAAO;UAAE,GAAGU,SAAS;UAAER;QAAU,CAAC;MAGpC,CAAC,CAAC;MAEF,IAAIL,cAAc,KAAKjJ,WAAW,EAAE;QAClCC,cAAc,CAACgJ,cAAc,CAAC;MAChC;MAEA5I,wBAAwB,CAACuJ,wBAAwB,CAAC;MAClD,IAAIA,wBAAwB,KAAK/I,kBAAkB,EAAE;QACnDR,wBAAwB,CAACuJ,wBAAwB,CAAC;QAClD9I,qBAAqB,CAAC8I,wBAAwB,CAAC;MACjD;MAEA,IAAIA,wBAAwB,GAAG,CAAC,GAAGtJ,WAAW,GAAGE,YAAY,EAAE;QAC7DD,cAAc,CAAEwJ,QAAQ,IAAKA,QAAQ,GAAG,GAAG,CAAC;MAC9C;MAEA,IAAIhK,QAAQ,CAAC8F,OAAO,EAAE;QACpBvD,OAAO,CAACC,GAAG,CAACqH,wBAAwB,EAAE,MAAM,EAAEd,GAAG,EAAE,MAAM,EAAEtI,YAAY,EAAE,aAAa,EAAEF,WAAW,CAAC;MACtG;MAEAQ,qBAAqB,CAAC8I,wBAAwB,CAAC;MAE/C,OAAOC,iBAAiB;IAC1B,CAAC,CAAC;IACJ1E,UAAU,CAAED,OAAO,IAAK;MACtB,IAAI+D,cAAc,GAAGjJ,WAAW;MAChC,IAAI4J,wBAAwB,GAAGxJ,qBAAqB;MAEpD,MAAMyJ,iBAAiB,GAAG3E,OAAO,CAACmD,GAAG,CAAC,CAAC2B,MAAM,EAAEZ,KAAK,KAAK;QAEvD,MAAMK,MAAM,GAAGC,aAAa,CAACM,MAAM,CAACL,OAAO,CAAC;QAC5C,MAAML,SAAS,GAAGtE,WAAW,IAAIyE,MAAM;QAEvC,IAAIH,SAAS,IAAI,CAACU,MAAM,CAACV,SAAS,EAAE;UAClC,IAAIF,KAAK,KAAKQ,wBAAwB,EAAE;YACtC;YACA,IAAI,CAAC7H,sBAAsB,CAACiI,MAAM,CAAC/D,EAAE,CAAC,EAAE;cACtCgD,cAAc,GAAGe,MAAM,CAACT,IAAI;cAC5B;cACAvH,yBAAyB,CAAED,sBAAsB,KAAM;gBACrD,GAAGA,sBAAsB;gBACzB,CAACiI,MAAM,CAAC/D,EAAE,GAAG;cACf,CAAC,CAAC,CAAC;YACL;YACA2D,wBAAwB,GAAGR,KAAK;UAClC;QACF;QAGA,OAAO;UAAE,GAAGY,MAAM;UAAEV;QAAU,CAAC;MAGjC,CAAC,CAAC;MAEF,IAAIL,cAAc,KAAKjJ,WAAW,EAAE;QAClCC,cAAc,CAACgJ,cAAc,CAAC;MAChC;MAEA5I,wBAAwB,CAACuJ,wBAAwB,CAAC;MAClD,IAAIA,wBAAwB,KAAK/I,kBAAkB,EAAE;QACnDR,wBAAwB,CAACuJ,wBAAwB,CAAC;QAClD9I,qBAAqB,CAAC8I,wBAAwB,CAAC;MACjD;MAEA,IAAIA,wBAAwB,GAAG,CAAC,GAAGtJ,WAAW,GAAGE,YAAY,EAAE;QAC7DD,cAAc,CAAED,WAAW,IAAKA,WAAW,GAAG,GAAG,CAAC;MACpD;MAGAQ,qBAAqB,CAAC8I,wBAAwB,CAAC;MAE/C,OAAOC,iBAAiB;IAC1B,CAAC,CAAC;EAEJ,CAAC;EAED,MAAMI,cAAc,GAAGA,CAAA,KAAM;IAC3BzK,aAAa,CAAC,IAAI,CAAC;IACnBJ,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;EACzB,CAAC;;EAED;EACAlC,SAAS,CAAC,MAAM;IACd,IAAI6C,QAAQ,CAAC8F,OAAO,EAAE;MACpB,MAAMqE,kBAAkB,GAAGnK,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,CAAC,CAAC;MAE3E8D,kBAAkB,CAAC7D,IAAI,CAAErB,WAAW,IAAK;QACvC,IAAIjF,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIrB,QAAQ,EAAE;UAC/C7B,wBAAwB,CAAC,KAAK,CAAC;QACjC;MACF,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAAC/B,QAAQ,CAAC8F,OAAO,CAAC,CAAC;EAEtB3I,SAAS,CAAC,MAAM;IACd,MAAMgL,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMvB,KAAK,CAAC,qDAAqD,EAAE;UAClFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEtI,MAAM,EAAEC,eAAe;YAAEsI,MAAM,EAAEpI;UAAiB,CAAC;QAC5E,CAAC,CAAC;QAEF,IAAI,CAACqJ,QAAQ,CAAChB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEA,MAAM+C,YAAY,GAAG,MAAMhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;QAC1C,MAAMtE,IAAI,GAAGkB,IAAI,CAACqD,KAAK,CAACF,YAAY,CAAC;QACrCnL,eAAe,CAAC8G,IAAI,CAAC;MACvB,CAAC,CAAC,OAAOmC,KAAK,EAAE;QACd3F,OAAO,CAAC2F,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD,CAAC,SAAS;QACR;QACA/I,UAAU,CAAC,KAAK,CAAC;MACrB;MAEE,IAAI;QACF,MAAMiJ,QAAQ,GAAG,MAAMvB,KAAK,CAAC,yDAAyD,EAAE;UACtFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEtI,MAAM,EAAEC;UAAgB,CAAC;QAClD,CAAC,CAAC;QAEA,IAAI,CAACuJ,QAAQ,CAAChB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEA,MAAM+C,YAAY,GAAG,MAAMhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;QAC1C,MAAMtE,IAAI,GAAGkB,IAAI,CAACqD,KAAK,CAACF,YAAY,CAAC;QACrCrK,aAAa,CAACgG,IAAI,CAACuC,GAAG,CAAEyB,SAAS,KAAM;UAAE,GAAGA,SAAS;UAAEQ,GAAG,EAAER,SAAS,CAAC7D;QAAG,CAAC,CAAC,CAAC,CAAC;MAC/E,CAAC,CAAC,OAAOgC,KAAK,EAAE;QACd;MAAA;MAGF,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMvB,KAAK,CAAC,iDAAiD,EAAE;UAChFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEtI,MAAM,EAAEC;UAAgB,CAAC;QAClD,CAAC,CAAC;QAEA,IAAI,CAACuJ,QAAQ,CAAChB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEA,MAAM+C,YAAY,GAAG,MAAMhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;QAC1C,MAAMtE,IAAI,GAAGkB,IAAI,CAACqD,KAAK,CAACF,YAAY,CAAC;QACrChF,UAAU,CAACW,IAAI,CAACuC,GAAG,CAAE2B,MAAM,KAAM;UAAE,GAAGA,MAAM;UAAEM,GAAG,EAAEN,MAAM,CAAC/D;QAAG,CAAC,CAAC,CAAC,CAAC;MACnE,CAAC,CAAC,OAAOgC,KAAK,EAAE,CAEhB;MAEA,IAAI;QACF,MAAME,QAAQ,GAAG,MAAMvB,KAAK,CAAC,iDAAiD,EAAE;UAChFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEtI,MAAM,EAAEC;UAAgB,CAAC;QAClD,CAAC,CAAC;QAEA,IAAI,CAACuJ,QAAQ,CAAChB,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2B,CAAC;QAC9C;QAEA,MAAM+C,YAAY,GAAG,MAAMhC,QAAQ,CAACiC,IAAI,CAAC,CAAC;QAC1C,MAAMtE,IAAI,GAAGkB,IAAI,CAACqD,KAAK,CAACF,YAAY,CAAC;QACrC5E,WAAW,CAACO,IAAI,CAACuC,GAAG,CAAEkC,OAAO,KAAM;UAAE,GAAGA,OAAO;UAAED,GAAG,EAAEC,OAAO,CAACtE;QAAG,CAAC,CAAC,CAAC,CAAC;MACvE,CAAC,CAAC,OAAOgC,KAAK,EAAE;QACd3F,OAAO,CAAC2F,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IAEF,CAAC;IACDC,SAAS,CAAC,CAAC;;IAEX;IACA;;IAEA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;EAIA,CAAC,EAAE,CAACtJ,eAAe,EAAEiB,UAAU,EAAEqF,OAAO,EAAE/F,WAAW,CAAC,CAAC;EAIzD,MAAMuK,aAAa,GAAIpD,IAAI,IAAK;IAC9B,IAAIkE,KAAK,GAAGlE,IAAI,CAACmE,KAAK,CAAC,GAAG,CAAC;IAC3B,OAAQ,CAACD,KAAK,CAAC,CAAC,CAAC,GAAI,EAAE,GAAG,EAAE,GAAI,CAACA,KAAK,CAAC,CAAC,CAAC,GAAI,EAAE,GAAI,CAACA,KAAK,CAAC,CAAC,CAAE;EAC/D,CAAC;EAGD,MAAME,iBAAiB,GAAGA,CAACC,MAAM,EAAEC,UAAU,EAAExB,KAAK,KAAK;IACvD,MAAMyB,eAAe,GAAG3G,SAAS,CAAC4G,IAAI,CAAEC,CAAC,IAAKA,CAAC,CAAC9E,EAAE,KAAK2E,UAAU,CAAC;IAClE,MAAMI,eAAe,GAAGL,MAAM,KAAKE,eAAe,CAAClC,cAAc;IACjEtD,oBAAoB,CAAC4F,SAAS,KAAK;MACjC,GAAGA,SAAS;MACZ,CAAE,GAAEL,UAAW,IAAGxB,KAAM,EAAC,GAAG4B;IAChC,CAAC,CAAC,CAAC;IACH9I,cAAc,CAACgJ,eAAe,KAAK;MAC/B,GAAGA,eAAe;MAClB,CAAE,GAAEN,UAAW,IAAGxB,KAAM,EAAC,GAAG4B,eAAe,GAAG,qBAAqB,GAAG;IAC1E,CAAC,CAAC,CAAC;;IAED;IACA,MAAMG,cAAc,GAAG,CAAC,GAAGjH,SAAS,CAACI,oBAAoB,CAAC,CAACiE,OAAO,CAAC;IAEnEpE,YAAY,CAAEiH,aAAa,IAAK;MAC9B,MAAMjC,gBAAgB,GAAG,CAAC,GAAGiC,aAAa,CAAC;MAC3CjC,gBAAgB,CAAC7E,oBAAoB,CAAC,GAAG;QACvC,GAAG6E,gBAAgB,CAAC7E,oBAAoB,CAAC;QACzCiE,OAAO,EAAE4C;MACX,CAAC;MACD,OAAOhC,gBAAgB;IACzB,CAAC,CAAC;;IAEF;IACAvH,gBAAgB,CAAEyJ,SAAS,IAAK;MAC9B,MAAMC,YAAY,GAAGD,SAAS,CAACT,UAAU,CAAC,IAAI;QAAEW,KAAK,EAAE,CAAC;QAAEC,WAAW,EAAE;MAAE,CAAC;MAE1E,MAAMC,YAAY,GAAG;QACnB,GAAGJ,SAAS;QACZ,CAACT,UAAU,GAAG;UACZW,KAAK,EAAED,YAAY,CAACC,KAAK,GAAG,CAAC;UAC7BC,WAAW,EAAER,eAAe,GAAGM,YAAY,CAACE,WAAW,GAAG,CAAC,GAAGF,YAAY,CAACE;QAC7E;MACF,CAAC;MAED,IAAI,CAACR,eAAe,IAAIM,YAAY,CAACC,KAAK,IAAI,CAAC,EAAE;QAC/ClH,oBAAoB,CAAEqH,YAAY,KAAM;UACtC,GAAGA,YAAY;UACf,CAACd,UAAU,GAAI,yCAAwCC,eAAe,CAAClC,cAAe;QACxF,CAAC,CAAC,CAAC;;QAEH;QACA8C,YAAY,CAACb,UAAU,CAAC,GAAG;UAAEW,KAAK,EAAED,YAAY,CAACC,KAAK;UAAEC,WAAW,EAAE;QAAE,CAAC;MAC1E,CAAC,MAAM;QACLnH,oBAAoB,CAAEqH,YAAY,KAAM;UACtC,GAAGA,YAAY;UACf,CAACd,UAAU,GAAGI,eAAe,GAAG,EAAE,GAAG;QACvC,CAAC,CAAC,CAAC;QAEH,IAAIA,eAAe,EAAE;UAAA,IAAAW,qBAAA;UACnBxH,YAAY,CAAEiH,aAAa,IAAKA,aAAa,CAACQ,MAAM,CAAEb,CAAC,IAAKA,CAAC,CAAC9E,EAAE,KAAK4E,eAAe,CAAC5E,EAAE,CAAC,CAAC;UACzF1B,uBAAuB,CAAEsH,SAAS,IAAK;YACrC,MAAMC,SAAS,GAAGD,SAAS,GAAG,CAAC;YAC/B,OAAOC,SAAS,GAAG5H,SAAS,CAAC9C,MAAM,GAAG0K,SAAS,GAAG,CAAC;UACrD,CAAC,CAAC;UACF/L,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAAC4F,SAAS,CAAC,CAAC;;UAE3C;UACAnF,KAAK,CAAC,oDAAoD,EAAE;YAC1DC,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;cACnB+E,IAAI,EAAEvJ,OAAO;cACbwJ,MAAM,EAAEpB,eAAe,CAAC5E,EAAE;cAC1BzB,KAAK,EAAE,EAAAmH,qBAAA,GAAAF,YAAY,CAACb,UAAU,CAAC,cAAAe,qBAAA,uBAAxBA,qBAAA,CAA0BJ,KAAK,KAAI,CAAC;cAC3CW,SAAS,EAAErI;YACb,CAAC;UACH,CAAC,CAAC,CACCwC,IAAI,CAAC8B,QAAQ,IAAI;YAChB,IAAI,CAACA,QAAQ,CAAChB,EAAE,EAAE;cAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;YAC5D;YACA,OAAOe,QAAQ,CAACiC,IAAI,CAAC,CAAC;UACxB,CAAC,CAAC,CACD/D,IAAI,CAACP,IAAI,IAAI;YACZxD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEuD,IAAI,CAAC;YACrC,OAAOkB,IAAI,CAACqD,KAAK,CAACvE,IAAI,CAAC;UACzB,CAAC,CAAC,CACDqG,KAAK,CAAClE,KAAK,IAAI;YACd3F,OAAO,CAAC2F,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;UACtD,CAAC,CAAC;QACN;MACF;MAEA,OAAOwD,YAAY;IACrB,CAAC,CAAC;IAGF,IAAIT,eAAe,EAAE;MACnBtK,kBAAkB,CAAE0L,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAACxB,UAAU,GAAG,CAACwB,IAAI,CAACxB,UAAU,CAAC,IAAI,CAAC,IAAI;MAAE,CAAC,CAAC,CAAC;IACxF,CAAC,MAAM;MACLhK,oBAAoB,CAAEwL,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAE,CAACxB,UAAU,GAAG,CAACwB,IAAI,CAACxB,UAAU,CAAC,IAAI,CAAC,IAAI;MAAE,CAAC,CAAC,CAAC;IAC1F;IAAC;IAED,IAAI1G,SAAS,CAAC9C,MAAM,KAAK,CAAC,EAAE;MAC1B;MACA1B,iBAAiB,CAAC,IAAI,CAAC;IACzB;EACF,CAAC;EAEDxC,SAAS,CAAC,MAAM;IACd,IAAImP,UAAU,GAAG,CAAC;IAClB,IAAIpD,cAAc,GAAGjJ,WAAW,CAAC,CAAC;IAClC,IAAGD,QAAQ,CAAC8F,OAAO,EAAE;MACrB,MAAMqE,kBAAkB,GAAGnK,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,CAAC,CAAC;MAE7E8D,kBAAkB,CAAC7D,IAAI,CAAErB,WAAW,IAAK;QACvCnF,UAAU,CAACyM,OAAO,CAAExC,SAAS,IAAK;UAChC,IAAIL,MAAM,GAAGC,aAAa,CAACI,SAAS,CAACH,OAAO,CAAC;UAC7C,IAAIL,SAAS,GAAGvJ,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIyE,MAAM,IAAIzE,WAAW;QAG1E,CAAC,CAAC;QAEF,IAAIjF,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,GAAGqH,UAAU,EAAE;UAChDlM,uBAAuB,CAAC,KAAK,CAAC;UAC9BmB,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,CAAC,CAAC;IACJ;EACE,CAAC,EAAE,CAACzB,UAAU,EAAEE,QAAQ,CAAC8F,OAAO,EAAE3F,oBAAoB,CAAC,CAAC;EACxD,MAAMqM,YAAY,GAAG;IACnBC,MAAM,EAAE,OAAO;IAAO;IACtBC,KAAK,EAAE,MAAM;IAAQ;IACrBC,UAAU,EAAE;MAAQ;MAClBC,QAAQ,EAAE,CAAC;MAAO;MAClBC,QAAQ,EAAE,CAAC;MAAO;MAClBC,QAAQ,EAAE,CAAC;MAAO;MAClBC,cAAc,EAAE,CAAC,CAAC;IACpB;EACF,CAAC;EAGD5P,SAAS,CAAC,MAAM;IACd,IAAImP,UAAU,GAAG,CAAC;IAClB,IAAIpD,cAAc,GAAGjJ,WAAW,CAAC,CAAC;IAClC,IAAGD,QAAQ,CAAC8F,OAAO,EAAE;MACrB,MAAMqE,kBAAkB,GAAGnK,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,CAAC,CAAC;MAE7E8D,kBAAkB,CAAC7D,IAAI,CAAErB,WAAW,IAAK;QACvCE,OAAO,CAACoH,OAAO,CACbtC,MAAM,IAAK;UACX,IAAIP,MAAM,GAAGC,aAAa,CAACM,MAAM,CAACL,OAAO,CAAC;UAC1C,IAAIL,SAAS,GAAGvJ,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIyE,MAAM,IAAIzE,WAAW;QAG1E,CAAC,CAAC;QAEF,IAAIjF,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,GAAGqH,UAAU,EAAE;UAChDlM,uBAAuB,CAAC,KAAK,CAAC;UAC9BmB,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,CAAC,CAAC;IACJ;EACE,CAAC,EAAE,CAAC4D,OAAO,EAAEnF,QAAQ,CAAC8F,OAAO,EAAE3F,oBAAoB,CAAC,CAAC;EAIrDhD,SAAS,CAAC,MAAM;IAEd,IAAImP,UAAU,GAAG,CAAC;IAClB,IAAIpD,cAAc,GAAGjJ,WAAW,CAAC,CAAC;IAClC,IAAGD,QAAQ,CAAC8F,OAAO,EAAE;MACrB,MAAMqE,kBAAkB,GAAGnK,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,CAAC,CAAC;MAE7E8D,kBAAkB,CAAC7D,IAAI,CAAErB,WAAW,IAAK;QACvCd,SAAS,CAACoI,OAAO,CACfhE,QAAQ,IAAK;UACb,IAAImB,MAAM,GAAGC,aAAa,CAACpB,QAAQ,CAACqB,OAAO,CAAC;UAC5C,IAAIL,SAAS,GAAGvJ,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIyE,MAAM,IAAIzE,WAAW;QAG1E,CAAC,CAAC;QAEF,IAAIjF,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,GAAGqH,UAAU,EAAE;UAChDlM,uBAAuB,CAAC,KAAK,CAAC;UAC9BmB,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC;QAChC;MACF,CAAC,CAAC;IACJ;EACE,CAAC,EAAE,CAAC4C,SAAS,EAAEnE,QAAQ,CAAC8F,OAAO,EAAE3F,oBAAoB,CAAC,CAAC;EAEvD,MAAM6M,kBAAkB,GAAGA,CAAA,KAAM;IAC/BnG,KAAK,CAAC,sDAAsD,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnB+E,IAAI,EAAEvJ,OAAO;QACb9D,MAAM,EAAEC,eAAe;QACvB+D,IAAI,EAAEkB;MACR,CAAC;IACH,CAAC,CAAC,CACDwC,IAAI,CAAC8B,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAAChB,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,yCAAyC,CAAC;MAC5D;MACA,OAAOe,QAAQ,CAACiC,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACD/D,IAAI,CAACP,IAAI,IAAI;MACZxD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEuD,IAAI,CAAC;MACrC,OAAOkB,IAAI,CAACqD,KAAK,CAACvE,IAAI,CAAC;IACzB,CAAC,CAAC,CACDqG,KAAK,CAAClE,KAAK,IAAI;MACd3F,OAAO,CAAC2F,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD,CAAC,CAAC;EACN,CAAC;EAED/K,SAAS,CAAC,MAAM;IACd,MAAM8P,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAIjN,QAAQ,CAAC8F,OAAO,IAAI9F,QAAQ,CAAC8F,OAAO,CAACM,cAAc,IAAIpG,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,EAAE;QACzG,MAAME,IAAI,GAAG,MAAMvG,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAACC,cAAc,CAAC,CAAC;QACnEnB,cAAc,CAACqB,IAAI,CAAC;MACtB;MAEA,IAAIvG,QAAQ,CAAC8F,OAAO,IAAI9F,QAAQ,CAAC8F,OAAO,CAACM,cAAc,IAAIpG,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAAC8G,WAAW,EAAE;QACtG,MAAMtJ,QAAQ,GAAG,MAAM5D,QAAQ,CAAC8F,OAAO,CAACM,cAAc,CAAC8G,WAAW,CAAC,CAAC;QACpErJ,WAAW,CAACD,QAAQ,CAAC;MACvB;IACF,CAAC;IAEDqJ,gBAAgB,CAAC,CAAC;IAClB,MAAMrN,UAAU,GAAGuG,WAAW,CAAC8G,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC;;IAExD,OAAO,MAAMzG,aAAa,CAAC5G,UAAU,CAAC,CAAC,CAAC;EAC1C,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIV,OAAO,EAAE;IACX,oBAAOjB,OAAA;MAAAkP,QAAA,EAAK;IAAW;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAC/B;EAEE,oBACEtP,OAAA;IAAKuP,SAAS,EAAC,SAAS;IAAAL,QAAA,eACpBlP,OAAA;MAAKuP,SAAS,EAAC,iBAAiB;MAAAL,QAAA,gBAClClP,OAAA;QAAAkP,QAAA,EAAKtO;MAAe;QAAAuO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC1BtP,OAAA;QAAKuP,SAAS,EAAC,mBAAmB;QAAAL,QAAA,EAGjCnN,QAAQ,IAAIhB,YAAY,iBACvBf,OAAA;UAAKuP,SAAS,EAAC,WAAW;UAAAL,QAAA,eAChClP,OAAA,CAACF,OAAO;YAEN0P,OAAO,EAAEzO,YAAa;YACtB0O,IAAI,EAAElB,YAAa;YACnB5G,aAAa,EAAEA,aAAc;YAC7B+H,GAAG,EAAE3N;UAAS;YAAAoN,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACf;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGU,CAAC,eACNtP,OAAA;QAAKuP,SAAS,EAAC,mBAAmB;QAAAL,QAAA,gBAChClP,OAAA;UAAKuP,SAAS,EAAC,eAAe;UAAAL,QAAA,gBAC9BlP,OAAA;YAAKuP,SAAS,EAAG,WAAUvN,WAAW,KAAK,SAAS,IAAK,CAACxB,WAAW,KAAK,SAAU,GAAG,QAAQ,GAAG,EAAG,EAAE;YAACmP,OAAO,EAAEA,CAAA,KAAM/E,cAAc,CAAC,SAAS,CAAE;YAAAsE,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/JtP,OAAA;YAAKuP,SAAS,EAAG,WAAUvN,WAAW,KAAK,MAAM,IAAK,CAACxB,WAAW,KAAK,MAAO,GAAG,QAAQ,GAAG,EAAG,EAAE;YAACmP,OAAO,EAAEA,CAAA,KAAM/E,cAAc,CAAC,MAAM,CAAE;YAAAsE,QAAA,EAAC;UAAI;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/ItP,OAAA;YAAKuP,SAAS,EAAG,WAAUvN,WAAW,KAAK,YAAY,IAAK,CAACxB,WAAW,KAAM,YAAa,GAAG,QAAQ,GAAG,EAAG,EAAE;YAACmP,OAAO,EAAEA,CAAA,KAAM/E,cAAc,CAAC,YAAY,CAAE;YAAAsE,QAAA,EAAC;UAAU;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC5KtP,OAAA;YAAKuP,SAAS,EAAG,WAAUvN,WAAW,KAAK,2BAA2B,GAAG,QAAQ,GAAG,EAAG,EAAE;YAAC2N,OAAO,EAAEA,CAAA,KAAM/E,cAAc,CAAC,2BAA2B,CAAE;YAAAsE,QAAA,EAAC;UAAM;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACjK,CAAC,EACL7N,cAAc,IAAIN,WAAW,iBAC9BnB,OAAA;UAAG4P,IAAI,EAAG,YAAWlP,KAAM,IAAGC,MAAO,eAAe;UAAAuO,QAAA,eAC5DlP,OAAA;YACEuP,SAAS,EAAC,SAAS;YACnBI,OAAO,EAAEZ,kBAAmB;YAAAG,QAAA,EAC7B;UAED;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACN,CAGF,EACQpJ,SAAS,CAACmE,GAAG,CAAEC,QAAQ,IAAK;UAC3B,IAAIvI,QAAQ,CAAC8F,OAAO,EAAE;YACpB,IAAI4D,MAAM,GAAGC,aAAa,CAACpB,QAAQ,CAACqB,OAAO,CAAC;YAC5C,IAAIL,SAAS,GAAGvJ,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIyE,MAAM;;YAGnE;;YAEA,IAAIH,SAAS,KAAKtJ,WAAW,KAAKsI,QAAQ,CAACiB,IAAI,IAAK,CAAC/K,WAAW,KAAK8J,QAAQ,CAACiB,IAAK,CAAC,EAAE;cAEpF,oBAEAvL,OAAA,CAAChB,KAAK,CAACiB,QAAQ;gBAAAiP,QAAA,gBACXlP,OAAA;kBAAKuP,SAAS,EAAC,UAAU;kBAACM,KAAK,EAAE;oBAAEC,OAAO,EAAE,MAAM;oBAAEC,MAAM,EAAE;kBAAQ,CAAE;kBAAAb,QAAA,gBAEpElP,OAAA;oBAAAkP,QAAA,EAAK5E,QAAQ,CAACA;kBAAQ;oBAAA6E,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAAK,CAAC,eAC5BtP,OAAA;oBAAKuP,SAAS,EAAC,gBAAgB;oBAAAL,QAAA,EAC9B5E,QAAQ,CAACC,OAAO,CAACF,GAAG,CAAC,CAACsC,MAAM,EAAEvB,KAAK,kBAC1CpL,OAAA;sBACAuP,SAAS,EAAEtL,WAAW,CAAE,GAAEqG,QAAQ,CAACrC,EAAG,IAAGmD,KAAM,EAAC,CAAC,IAAI,aAAc;sBAEnEuE,OAAO,EAAEA,CAAA,KAAMjD,iBAAiB,CAACC,MAAM,EAAErC,QAAQ,CAACrC,EAAE,EAAEmD,KAAK,CAAE;sBAAA8D,QAAA,EAE5DvC;oBAAM,GAHFvB,KAAK;sBAAA+D,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAIN,CAEK;kBAAC;oBAAAH,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAED,CAAC;gBAAA;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACD,CAAC,eACNtP,OAAA;kBAAAmP,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OAAK,CAAC;cAAA,GAlBWhF,QAAQ,CAACrC,EAAE;gBAAAkH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAmBd,CAAC;YAErB;YAEA,OAAO,IAAI;UAEb;QACA,CAAC,CAAC,EAID7L,YAAY,CAAC4G,GAAG,CAAEyB,SAAS,IAAK;UAC/B,IAAIL,MAAM,GAAGC,aAAa,CAACI,SAAS,CAACH,OAAO,CAAC;UAC7C,IAAIL,SAAS,GAAGvJ,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIyE,MAAM;UAEzD,IAAIH,SAAS,KAAKtJ,WAAW,KAAK8J,SAAS,CAACP,IAAI,IAAK,CAAC/K,WAAW,KAAKsL,SAAS,CAACP,IAAK,CAAC,EAAE;YACtF,IAAIrJ,oBAAoB,IAAIF,WAAW,KAAK8J,SAAS,CAACP,IAAI,EAAE;cAC1D,OAAO,IAAI;YACb;;YAEA;YACA,MAAMyE,YAAY,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC;YAC/E,MAAMC,OAAO,GAAGD,YAAY,CAACE,IAAI,CAACC,MAAM,IAAIrE,SAAS,CAACM,IAAI,CAACgE,QAAQ,CAACD,MAAM,CAAC,CAAC;YAE5E,oBACEnQ,OAAA,CAAAE,SAAA;cAAAgP,QAAA,eACElP,OAAA,CAAChB,KAAK,CAACiB,QAAQ;gBAAAiP,QAAA,eACblP,OAAA;kBACEuP,SAAS,EAAC,UAAU;kBACpBM,KAAK,EAAE;oBACLC,OAAO,EAAE,OAAO;oBAChBC,MAAM,EAAE,QAAQ,CAAE;kBACpB,CAAE;kBAAAb,QAAA,EAEDe,OAAO,gBACVjQ,OAAA;oBACAqQ,GAAG,EAAG,uCAAsCvE,SAAS,CAACM,IAAK,EAAE;oBAC7DkE,GAAG,EAAC,QAAQ;oBACZ7B,KAAK,EAAC,KAAK;oBACXkB,OAAO,EAAEA,CAAA,KAAMnI,SAAS,CAAE,uCAAsCsE,SAAS,CAACM,IAAK,EAAC;kBAAE;oBAAA+C,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OACnF,CAAC,GAGIxD,SAAS,CAACM,IAAI,CAACK,KAAK,CAAC,IAAI,CAAC,CAACpC,GAAG,CAAC,CAACkG,IAAI,EAAEnF,KAAK,kBACzCpL,OAAA,CAAChB,KAAK,CAACiB,QAAQ;oBAAAiP,QAAA,GACZqB,IAAI,eACLvQ,OAAA;sBAAAmP,QAAA,EAAAC,YAAA;sBAAAC,UAAA;sBAAAC,YAAA;oBAAA,OAAK,CAAC;kBAAA,GAFalE,KAAK;oBAAA+D,QAAA,EAAAC,YAAA;oBAAAC,UAAA;oBAAAC,YAAA;kBAAA,OAGV,CACjB;gBACF;kBAAAH,QAAA,EAAAC,YAAA;kBAAAC,UAAA;kBAAAC,YAAA;gBAAA,OACE;cAAC,GAxBaxD,SAAS,CAAC7D,EAAE;gBAAAkH,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAyBjB;YAAC,gBACjB,CAAC;UAEP;UACA,OAAO,IAAI;QACb,CAAC,CAAC,EAGCpI,OAAO,CAACmD,GAAG,CAAE2B,MAAM,IAAK;UACrB,IAAIP,MAAM,GAAGC,aAAa,CAACM,MAAM,CAACL,OAAO,CAAC;UAC1C,IAAIL,SAAS,GAAGvJ,QAAQ,CAAC8F,OAAO,IAAIb,WAAW,IAAIyE,MAAM;UAE7D,IAAIH,SAAS,KAAKtJ,WAAW,KAAKgK,MAAM,CAACT,IAAI,IAAK,CAAC/K,WAAW,KAAKwL,MAAM,CAACT,IAAK,CAAC,EAAE;YAChF;YACA,IAAIrJ,oBAAoB,IAAIF,WAAW,KAAKgK,MAAM,CAACT,IAAI,EAAE;cACvD,OAAO,IAAI;YACb;YAEA,oBACEvL,OAAA,CAAChB,KAAK,CAACiB,QAAQ;cAAAiP,QAAA,gBACblP,OAAA;gBACEuP,SAAS,EAAC,UAAU;gBACpBM,KAAK,EAAE;kBACLC,OAAO,EAAE,OAAO;kBAChBC,MAAM,EAAE,OAAO,CAAE;gBACnB,CAAE;gBAAAb,QAAA,EAGDlD,MAAM,CAACI;cAAI;gBAAA+C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OACT,CAAC,eACNtP,OAAA;gBAAAmP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC;YAAA,GAXatD,MAAM,CAAC/D,EAAE;cAAAkH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAYd,CAAC;UAGrB;UACA,OAAO,IAAI;QACb,CAAC,CAAC,EAGDtN,WAAW,KAAK,2BAA2B,IAC5CsF,QAAQ,CAAC+C,GAAG,CAAEkC,OAAO,IAAK;UACzB;UACC,oBACEvM,OAAA;YAAAkP,QAAA,eACElP,OAAA;cACEuP,SAAS,EAAC,UAAU;cACpBM,KAAK,EAAE;gBACLC,OAAO,EAAE,OAAO;gBAChBC,MAAM,EAAE,OAAO,CAAE;cACnB,CAAE;cAAAb,QAAA,eAEFlP,OAAA;gBAAG4P,IAAI,EAAErD,OAAO,CAACH,IAAK;gBAAA8C,QAAA,EAAE3C,OAAO,CAACH;cAAI;gBAAA+C,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAI;YAAC;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACtC;UAAC,GATE/C,OAAO,CAACtE,EAAE;YAAAkH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUf,CAAC;QAEV,CAAC,CAAC,EAEDxJ,SAAS,iBACA9F,OAAA;UAAKuP,SAAS,EAAC,QAAQ;UAAAL,QAAA,gBACrBlP,OAAA;YAAMuP,SAAS,EAAC,QAAQ;YAACI,OAAO,EAAEjI,UAAW;YAAAwH,QAAA,EAAC;UAAO;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAM,CAAC,eAC5DtP,OAAA;YAAKuP,SAAS,EAAC,gBAAgB;YAACc,GAAG,EAAErK,aAAc;YAACsK,GAAG,EAAC;UAAgB;YAAAnB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxE,CACN,eAETtP,OAAA,CAACJ,UAAU;UAAAuP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACR,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEN,CAAC;AAAAlP,EAAA,CAl7BKD,cAAc;EAAA,QACDN,WAAW,EAGJR,SAAS;AAAA;AAAAmR,EAAA,GAJ7BrQ,cAAc;AAo7BpB,eAAeA,cAAc;AAAC,IAAAqQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}