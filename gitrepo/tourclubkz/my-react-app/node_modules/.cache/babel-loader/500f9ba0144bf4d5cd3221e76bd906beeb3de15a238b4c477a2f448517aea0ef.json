{"ast":null,"code":"var _jsxFileName = \"/Applications/MAMP/htdocs/gitrepo/tourclubkz/my-react-app/src/finaltest.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport Navpanmini from \"./navpanmini\";\nimport './fintest.css';\nimport { jwtDecode } from 'jwt-decode';\nimport { BASE_URL } from './config';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Finaltest() {\n  _s();\n  var _questions$currentQue3, _questions$currentQue4;\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [tries, setTries] = useState(0);\n  const [currentQuestionTries, setCurrentQuestionTries] = useState(0); // Новое состояние\n  const [incorrectAnswers, setIncorrectAnswers] = useState([]);\n  const [showContinueButton, setShowContinueButton] = useState(false);\n  const [progress, setProgress] = useState(0);\n  const {\n    title,\n    lesson\n  } = useParams();\n  const titleWithSpaces = lesson.replace(/-/g, ' ');\n  const [correctAnswers, setCorrectAnswers] = useState([]);\n  const [answeredCorrectly, setAnsweredCorrectly] = useState(false);\n  const [testCompleted, setTestCompleted] = useState(false);\n  const navigate = useNavigate();\n  const token = localStorage.getItem('token');\n  let decoded = jwtDecode(token);\n  let user_id = decoded.sub;\n  const date = new Date(); // текущая дата и время\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // добавляем ведущий ноль, если месяц меньше 10\n  const day = String(date.getDate()).padStart(2, '0'); // добавляем ведущий ноль, если день меньше 10\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n  const seconds = String(date.getSeconds()).padStart(2, '0');\n  const formattedTimestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n  const shuffleArray = array => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}tourschoolphp/fintestlesson.php`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            lesson: titleWithSpaces\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n        const data = await response.json();\n\n        // Преобразовать данные в ожидаемый формат\n        const formattedQuestions = data.map(question => ({\n          ...question,\n          options: shuffleArray([question.incorrect_answer1, question.incorrect_answer2, question.incorrect_answer3, question.correct_answer])\n        }));\n        setQuestions(formattedQuestions);\n      } catch (error) {\n        console.error('Ошибка при отправке запроса:', error);\n      }\n    };\n    fetchData();\n  }, [titleWithSpaces]);\n  const sendTestData = async () => {\n    try {\n      var _questions$currentQue;\n      const response = await fetch(`${BASE_URL}tourschoolphp/fintestresult.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user: user_id,\n          testid: (_questions$currentQue = questions[currentQuestionIndex]) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.id,\n          // использование question_id\n          tries: tries,\n          total: questions.length,\n          timestamp: formattedTimestamp\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Ошибка при отправке данных на сервер');\n      }\n      const data = await response.json();\n      console.log('Данные успешно отправлены на сервер:', data);\n    } catch (error) {\n      console.error('Ошибка при отправке данных на сервер:', error);\n    }\n  };\n  const handleOptionClick = option => {\n    if (answeredCorrectly) {\n      // Если уже был дан правильный ответ, не обрабатываем клик\n      return;\n    }\n    const isAnswerCorrect = option === questions[currentQuestionIndex].correct_answer;\n    setTries(tries + 1);\n    if (!isAnswerCorrect) {\n      setCurrentQuestionTries(currentQuestionTries + 1);\n      setIncorrectAnswers([...incorrectAnswers, option]);\n    } else {\n      var _questions$currentQue2;\n      setCorrectAnswers([...correctAnswers, option]);\n      setShowContinueButton(true);\n      setCurrentQuestionTries(0);\n      setAnsweredCorrectly(true); // Устанавливаем флаг, что был дан правильный ответ\n      console.log(\"Current Question ID:\", (_questions$currentQue2 = questions[currentQuestionIndex]) === null || _questions$currentQue2 === void 0 ? void 0 : _questions$currentQue2.id);\n      sendTestData();\n    }\n  };\n  const handleContinueClick = () => {\n    const nextQuestionIndex = (currentQuestionIndex + 1) % questions.length;\n    if (nextQuestionIndex === 0) {\n      // Если это последний вопрос, то тест завершен\n      setTestCompleted(true);\n      navigate(`/courses/${title}/${lesson}/summary-page`);\n    } else {\n      setCurrentQuestionIndex(nextQuestionIndex);\n      setTries(0);\n      setIncorrectAnswers([]);\n      setShowContinueButton(false);\n      setProgress((currentQuestionIndex + 1) / questions.length * 100);\n      setCurrentQuestionTries(0);\n      setAnsweredCorrectly(false);\n    }\n  };\n  console.log(tries);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      className: \"form7\",\n      src: \"/form7.svg\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 4\n    }, this), testCompleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u0422\\u0435\\u0441\\u0442 \\u0437\\u0430\\u0432\\u0435\\u0440\\u0448\\u0435\\u043D! \\u0421\\u043F\\u0430\\u0441\\u0438\\u0431\\u043E \\u0437\\u0430 \\u0443\\u0447\\u0430\\u0441\\u0442\\u0438\\u0435.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"/your-link-here\",\n        children: \"\\u0412\\u0430\\u0448\\u0430 \\u0441\\u0441\\u044B\\u043B\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"full-pagetest\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"containertest\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"progress-barnorm\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-bartest\",\n            style: {\n              width: `${progress}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"questionfin\",\n          children: (_questions$currentQue3 = questions[currentQuestionIndex]) === null || _questions$currentQue3 === void 0 ? void 0 : _questions$currentQue3.question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"answersvar\",\n          children: (_questions$currentQue4 = questions[currentQuestionIndex]) === null || _questions$currentQue4 === void 0 ? void 0 : _questions$currentQue4.options.map((option, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleOptionClick(option),\n            disabled: incorrectAnswers.includes(option) || correctAnswers.includes(option),\n            className: incorrectAnswers.includes(option) ? 'incorrect' : correctAnswers.includes(option) ? 'correct' : '',\n            children: incorrectAnswers.includes(option) ? `X ${option}` : correctAnswers.includes(option) ? `✓ ${option}` : option\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 9\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"buttoncontin\",\n          children: showContinueButton && /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleContinueClick,\n            children: currentQuestionIndex === questions.length - 1 ? 'Завершить тест' : 'Продолжить ->'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Navpanmini, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 6\n    }, this)]\n  }, void 0, true);\n}\n_s(Finaltest, \"8EnfigFo/OLcUe1WSXQoEpa6Mng=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = Finaltest;\nexport default Finaltest;\nvar _c;\n$RefreshReg$(_c, \"Finaltest\");","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Link","Navpanmini","jwtDecode","BASE_URL","jsxDEV","_jsxDEV","Fragment","_Fragment","Finaltest","_s","_questions$currentQue3","_questions$currentQue4","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","tries","setTries","currentQuestionTries","setCurrentQuestionTries","incorrectAnswers","setIncorrectAnswers","showContinueButton","setShowContinueButton","progress","setProgress","title","lesson","titleWithSpaces","replace","correctAnswers","setCorrectAnswers","answeredCorrectly","setAnsweredCorrectly","testCompleted","setTestCompleted","navigate","token","localStorage","getItem","decoded","user_id","sub","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTimestamp","shuffleArray","array","i","length","j","Math","floor","random","fetchData","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","formattedQuestions","map","question","options","incorrect_answer1","incorrect_answer2","incorrect_answer3","correct_answer","error","console","sendTestData","_questions$currentQue","user","testid","id","total","timestamp","log","handleOptionClick","option","isAnswerCorrect","_questions$currentQue2","handleContinueClick","nextQuestionIndex","children","className","src","fileName","_jsxFileName","lineNumber","columnNumber","href","style","width","index","onClick","disabled","includes","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/gitrepo/tourclubkz/my-react-app/src/finaltest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport Navpanmini from \"./navpanmini\";\nimport './fintest.css';\nimport { jwtDecode } from 'jwt-decode';\nimport { BASE_URL } from './config';\nfunction Finaltest() {\n  const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [tries, setTries] = useState(0);\n    const [currentQuestionTries, setCurrentQuestionTries] = useState(0); // Новое состояние\n    const [incorrectAnswers, setIncorrectAnswers] = useState([]);\n    const [showContinueButton, setShowContinueButton] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const { title, lesson } = useParams();\n    const titleWithSpaces = lesson.replace(/-/g, ' ');\n    const [correctAnswers, setCorrectAnswers] = useState([]);\n    const [answeredCorrectly, setAnsweredCorrectly] = useState(false);\nconst [testCompleted, setTestCompleted] = useState(false);\nconst navigate = useNavigate();\n\n    const token = localStorage.getItem('token');\n\n          \n    let decoded = jwtDecode(token);\n    \n    let user_id = decoded.sub;\n    const date = new Date(); // текущая дата и время\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // добавляем ведущий ноль, если месяц меньше 10\n    const day = String(date.getDate()).padStart(2, '0'); // добавляем ведущий ноль, если день меньше 10\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    const formattedTimestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    const shuffleArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    };\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(`${BASE_URL}tourschoolphp/fintestlesson.php`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ lesson: titleWithSpaces }),\n          });\n  \n          if (!response.ok) {\n            throw new Error('Ошибка при запросе данных');\n          }\n  \n          const data = await response.json();\n  \n          // Преобразовать данные в ожидаемый формат\n          const formattedQuestions = data.map((question) => ({\n            ...question,\n            options: shuffleArray([\n              question.incorrect_answer1,\n              question.incorrect_answer2,\n              question.incorrect_answer3,\n              question.correct_answer,\n            ]),\n          }));\n  \n          setQuestions(formattedQuestions);\n        } catch (error) {\n          console.error('Ошибка при отправке запроса:', error);\n        }\n      };\n  \n      fetchData();\n    }, [titleWithSpaces]);\n    const sendTestData = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}tourschoolphp/fintestresult.php`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            user: user_id,\n            testid: questions[currentQuestionIndex]?.id,  // использование question_id\n            tries: tries,\n            total: questions.length,\n            timestamp: formattedTimestamp,\n          }),\n        });\n    \n        if (!response.ok) {\n          throw new Error('Ошибка при отправке данных на сервер');\n        }\n    \n        const data = await response.json();\n        console.log('Данные успешно отправлены на сервер:', data);\n      } catch (error) {\n        console.error('Ошибка при отправке данных на сервер:', error);\n      }\n    };\n       const handleOptionClick = (option) => {\n        if (answeredCorrectly) {\n            // Если уже был дан правильный ответ, не обрабатываем клик\n            return;\n        }\n \n\n\n        const isAnswerCorrect = option === questions[currentQuestionIndex].correct_answer;\n        setTries(tries + 1);\n  if (!isAnswerCorrect) {\n   \n    setCurrentQuestionTries(currentQuestionTries + 1);\n    setIncorrectAnswers([...incorrectAnswers, option]);\n  } else {\n    setCorrectAnswers([...correctAnswers, option]);\n    setShowContinueButton(true);\n    setCurrentQuestionTries(0);\n    setAnsweredCorrectly(true); // Устанавливаем флаг, что был дан правильный ответ\n    console.log(\"Current Question ID:\", questions[currentQuestionIndex]?.id);\n    sendTestData();\n\n  \n  }\n};\n\n\n\n\nconst handleContinueClick = () => {\n  const nextQuestionIndex = (currentQuestionIndex + 1) % questions.length;\n  if (nextQuestionIndex === 0) {\n      // Если это последний вопрос, то тест завершен\n      setTestCompleted(true);\n      navigate(`/courses/${title}/${lesson}/summary-page`);\n  } else {\n      setCurrentQuestionIndex(nextQuestionIndex);\n      setTries(0);\n      setIncorrectAnswers([]);\n      setShowContinueButton(false);\n      setProgress((currentQuestionIndex + 1) / questions.length * 100);\n      setCurrentQuestionTries(0);\n      setAnsweredCorrectly(false);\n  }\n};\n\n\n\n    console.log(tries);\n    return(\n        <>\n   <img className=\"form7\" src='/form7.svg'></img>\n  \n        {testCompleted ? (\n            <div>\n                <p>Тест завершен! Спасибо за участие.</p>\n                <a href=\"/your-link-here\">Ваша ссылка</a>\n            </div>\n        ) : (\n            <div className='full-pagetest'>\n            <div className='containertest'>\n                <div className='progress-barnorm'>\n        <div className='progress-bartest' style={{ width: `${progress}%` }}></div>\n        </div>\n        <div className='questionfin'>\n  {questions[currentQuestionIndex]?.question}\n  \n</div>\n        <div className='answersvar'>\n        {questions[currentQuestionIndex]?.options.map((option, index) => (\n        <button key={index} onClick={() => handleOptionClick(option)} disabled={incorrectAnswers.includes(option) || correctAnswers.includes(option)} className={incorrectAnswers.includes(option) ? 'incorrect' : correctAnswers.includes(option) ? 'correct' : ''}>\n          {incorrectAnswers.includes(option) ? `X ${option}` : correctAnswers.includes(option) ? `✓ ${option}` : option}\n        </button>\n      ))}\n        </div>\n        <div className='buttoncontin'>\n        {showContinueButton && \n          <button onClick={handleContinueClick}>\n            {currentQuestionIndex === questions.length - 1 ? 'Завершить тест' : 'Продолжить ->'}\n          </button>\n        } \n        </div>\n        </div>\n        \n        </div>\n     )}\n     \n     <Navpanmini />\n  \n    </>\n    )\n}\nexport default Finaltest; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}