{"ast":null,"code":"var _s = $RefreshSig$();\n// src/components/PrivateRoute.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nconst AdminRoute = ({\n  children\n}) => {\n  _s();\n  const [isAdmin, setIsAdmin] = useState(false);\n  const token = localStorage.getItem('token');\n  const decodedToken = jwtDecode(token);\n  const id = decodedToken.sub;\n  const navigate = useNavigate();\n  useEffect(() => {\n    const checkUserStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/checkUserAdmin.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            id\n          })\n        });\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        const data = await response.json();\n        if (data.status === 'active' && data.role === 'admin') {\n          // User is an admin\n          setIsAdmin(true);\n        } else {\n          // User is not an admin or other error\n          setIsAdmin(false);\n          console.error('Error in checkUserStatus:', data.error);\n\n          // Redirect to '/courses' if the user is not an admin\n          navigate('/courses');\n        }\n      } catch (error) {\n        console.error('An error occurred while checking user status:', error);\n      }\n    };\n    if (token) {\n      checkUserStatus(); // Check user status when the component loads\n    } else {\n      navigate('/'); // If there is no token, navigate to the home page\n    }\n  }, [token, navigate, id]);\n  return isAdmin ? children : null;\n};\n_s(AdminRoute, \"WYQCjijwOEUEBTQ5OCjaeKqzSes=\", false, function () {\n  return [useNavigate];\n});\n_c = AdminRoute;\nexport default AdminRoute;\nvar _c;\n$RefreshReg$(_c, \"AdminRoute\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jwtDecode","AdminRoute","children","_s","isAdmin","setIsAdmin","token","localStorage","getItem","decodedToken","id","sub","navigate","checkUserStatus","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","data","json","role","console","error","_c","$RefreshReg$"],"sources":["/Applications/MAMP/htdocs/tourclubkz/my-react-app/src/Adminroute.js"],"sourcesContent":["// src/components/PrivateRoute.js\n\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\n\nconst AdminRoute = ({ children }) => {\n  const [isAdmin, setIsAdmin] = useState(false);\n  const token = localStorage.getItem('token');\n  const decodedToken = jwtDecode(token);\n  const id = decodedToken.sub;\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const checkUserStatus = async () => {\n      try {\n        const response = await fetch('http://localhost:8888/tourschoolphp/checkUserAdmin.php', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ id }),\n        });\n\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n\n        const data = await response.json();\n\n        if (data.status === 'active' && data.role === 'admin') {\n          // User is an admin\n          setIsAdmin(true);\n        } else {\n          // User is not an admin or other error\n          setIsAdmin(false);\n          console.error('Error in checkUserStatus:', data.error);\n\n          // Redirect to '/courses' if the user is not an admin\n          navigate('/courses');\n        }\n      } catch (error) {\n        console.error('An error occurred while checking user status:', error);\n      }\n    };\n\n    if (token) {\n      checkUserStatus(); // Check user status when the component loads\n    } else {\n      navigate('/'); // If there is no token, navigate to the home page\n    }\n  }, [token, navigate, id]);\n\n  return isAdmin ? children : null;\n};\n\nexport default AdminRoute;\n"],"mappings":";AAAA;;AAEA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,SAAS,QAAQ,YAAY;AAEtC,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMQ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,YAAY,GAAGT,SAAS,CAACM,KAAK,CAAC;EACrC,MAAMI,EAAE,GAAGD,YAAY,CAACE,GAAG;EAC3B,MAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAC;EAE9BF,SAAS,CAAC,MAAM;IACd,MAAMgB,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,wDAAwD,EAAE;UACrFC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEV;UAAG,CAAC;QAC7B,CAAC,CAAC;QAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;UAChB,MAAM,IAAIC,KAAK,CAAE,uBAAsBR,QAAQ,CAACS,MAAO,EAAC,CAAC;QAC3D;QAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;QAElC,IAAID,IAAI,CAACD,MAAM,KAAK,QAAQ,IAAIC,IAAI,CAACE,IAAI,KAAK,OAAO,EAAE;UACrD;UACArB,UAAU,CAAC,IAAI,CAAC;QAClB,CAAC,MAAM;UACL;UACAA,UAAU,CAAC,KAAK,CAAC;UACjBsB,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAEJ,IAAI,CAACI,KAAK,CAAC;;UAEtD;UACAhB,QAAQ,CAAC,UAAU,CAAC;QACtB;MACF,CAAC,CAAC,OAAOgB,KAAK,EAAE;QACdD,OAAO,CAACC,KAAK,CAAC,+CAA+C,EAAEA,KAAK,CAAC;MACvE;IACF,CAAC;IAED,IAAItB,KAAK,EAAE;MACTO,eAAe,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC,MAAM;MACLD,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IACjB;EACF,CAAC,EAAE,CAACN,KAAK,EAAEM,QAAQ,EAAEF,EAAE,CAAC,CAAC;EAEzB,OAAON,OAAO,GAAGF,QAAQ,GAAG,IAAI;AAClC,CAAC;AAACC,EAAA,CAhDIF,UAAU;EAAA,QAKGF,WAAW;AAAA;AAAA8B,EAAA,GALxB5B,UAAU;AAkDhB,eAAeA,UAAU;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}