{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useParams,useNavigate,Link}from'react-router-dom';import Navpanmini from\"./navpanmini\";import'./fintest.css';import{jwtDecode}from'jwt-decode';import{BASE_URL}from'./config';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";function Finaltest(){var _questions$currentQue3,_questions$currentQue4;const[questions,setQuestions]=useState([]);const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[tries,setTries]=useState(0);const[currentQuestionTries,setCurrentQuestionTries]=useState(0);// Новое состояние\nconst[incorrectAnswers,setIncorrectAnswers]=useState([]);const[showContinueButton,setShowContinueButton]=useState(false);const[progress,setProgress]=useState(0);const{title,lesson}=useParams();const titleWithSpaces=lesson.replace(/-/g,' ');const[correctAnswers,setCorrectAnswers]=useState([]);const[answeredCorrectly,setAnsweredCorrectly]=useState(false);const[testCompleted,setTestCompleted]=useState(false);const navigate=useNavigate();const token=localStorage.getItem('token');let decoded=jwtDecode(token);let user_id=decoded.sub;const date=new Date();// текущая дата и время\nconst year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,'0');// добавляем ведущий ноль, если месяц меньше 10\nconst day=String(date.getDate()).padStart(2,'0');// добавляем ведущий ноль, если день меньше 10\nconst hours=String(date.getHours()).padStart(2,'0');const minutes=String(date.getMinutes()).padStart(2,'0');const seconds=String(date.getSeconds()).padStart(2,'0');const formattedTimestamp=\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\" \").concat(hours,\":\").concat(minutes,\":\").concat(seconds);const shuffleArray=array=>{for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]];}return array;};useEffect(()=>{const fetchData=async()=>{try{const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/fintestlesson.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lesson:titleWithSpaces})});if(!response.ok){throw new Error('Ошибка при запросе данных');}const data=await response.json();// Преобразовать данные в ожидаемый формат\nconst formattedQuestions=data.map(question=>({...question,options:shuffleArray([question.incorrect_answer1,question.incorrect_answer2,question.incorrect_answer3,question.correct_answer])}));setQuestions(formattedQuestions);}catch(error){console.error('Ошибка при отправке запроса:',error);}};fetchData();},[titleWithSpaces]);const sendTestData=async()=>{try{var _questions$currentQue;const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/fintestresult.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user:user_id,testid:(_questions$currentQue=questions[currentQuestionIndex])===null||_questions$currentQue===void 0?void 0:_questions$currentQue.id,// использование question_id\ntries:tries,total:questions.length,timestamp:formattedTimestamp})});if(!response.ok){throw new Error('Ошибка при отправке данных на сервер');}const data=await response.json();console.log('Данные успешно отправлены на сервер:',data);}catch(error){console.error('Ошибка при отправке данных на сервер:',error);}};const handleOptionClick=option=>{if(answeredCorrectly){// Если уже был дан правильный ответ, не обрабатываем клик\nreturn;}const isAnswerCorrect=option===questions[currentQuestionIndex].correct_answer;setTries(tries+1);if(!isAnswerCorrect){setCurrentQuestionTries(currentQuestionTries+1);setIncorrectAnswers([...incorrectAnswers,option]);}else{var _questions$currentQue2;setCorrectAnswers([...correctAnswers,option]);setShowContinueButton(true);setCurrentQuestionTries(0);setAnsweredCorrectly(true);// Устанавливаем флаг, что был дан правильный ответ\nconsole.log(\"Current Question ID:\",(_questions$currentQue2=questions[currentQuestionIndex])===null||_questions$currentQue2===void 0?void 0:_questions$currentQue2.id);sendTestData();}};const handleContinueClick=()=>{const nextQuestionIndex=(currentQuestionIndex+1)%questions.length;if(nextQuestionIndex===0){// Если это последний вопрос, то тест завершен\nsetTestCompleted(true);navigate(\"/courses/\".concat(title,\"/\").concat(lesson,\"/summary-page\"));}else{setCurrentQuestionIndex(nextQuestionIndex);setTries(0);setIncorrectAnswers([]);setShowContinueButton(false);setProgress((currentQuestionIndex+1)/questions.length*100);setCurrentQuestionTries(0);setAnsweredCorrectly(false);}};console.log(tries);return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"img\",{className:\"form7\",src:\"/form7.svg\"}),testCompleted?/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"\\u0422\\u0435\\u0441\\u0442 \\u0437\\u0430\\u0432\\u0435\\u0440\\u0448\\u0435\\u043D! \\u0421\\u043F\\u0430\\u0441\\u0438\\u0431\\u043E \\u0437\\u0430 \\u0443\\u0447\\u0430\\u0441\\u0442\\u0438\\u0435.\"}),/*#__PURE__*/_jsx(\"a\",{href:\"/your-link-here\",children:\"\\u0412\\u0430\\u0448\\u0430 \\u0441\\u0441\\u044B\\u043B\\u043A\\u0430\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"full-pagetest\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"containertest\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"progress-barnorm\",children:/*#__PURE__*/_jsx(\"div\",{className:\"progress-bartest\",style:{width:\"\".concat(progress,\"%\")}})}),/*#__PURE__*/_jsx(\"div\",{className:\"questionfin\",children:(_questions$currentQue3=questions[currentQuestionIndex])===null||_questions$currentQue3===void 0?void 0:_questions$currentQue3.question}),/*#__PURE__*/_jsx(\"div\",{className:\"answersvar\",children:(_questions$currentQue4=questions[currentQuestionIndex])===null||_questions$currentQue4===void 0?void 0:_questions$currentQue4.options.map((option,index)=>/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleOptionClick(option),disabled:incorrectAnswers.includes(option)||correctAnswers.includes(option),className:incorrectAnswers.includes(option)?'incorrect':correctAnswers.includes(option)?'correct':'',children:incorrectAnswers.includes(option)?\"X \".concat(option):correctAnswers.includes(option)?\"\\u2713 \".concat(option):option},index))}),/*#__PURE__*/_jsx(\"div\",{className:\"buttoncontin\",children:showContinueButton&&/*#__PURE__*/_jsx(\"button\",{onClick:handleContinueClick,children:currentQuestionIndex===questions.length-1?'Завершить тест':'Продолжить ->'})})]})}),/*#__PURE__*/_jsx(Navpanmini,{})]});}export default Finaltest;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","Link","Navpanmini","jwtDecode","BASE_URL","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","Finaltest","_questions$currentQue3","_questions$currentQue4","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","tries","setTries","currentQuestionTries","setCurrentQuestionTries","incorrectAnswers","setIncorrectAnswers","showContinueButton","setShowContinueButton","progress","setProgress","title","lesson","titleWithSpaces","replace","correctAnswers","setCorrectAnswers","answeredCorrectly","setAnsweredCorrectly","testCompleted","setTestCompleted","navigate","token","localStorage","getItem","decoded","user_id","sub","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedTimestamp","concat","shuffleArray","array","i","length","j","Math","floor","random","fetchData","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","formattedQuestions","map","question","options","incorrect_answer1","incorrect_answer2","incorrect_answer3","correct_answer","error","console","sendTestData","_questions$currentQue","user","testid","id","total","timestamp","log","handleOptionClick","option","isAnswerCorrect","_questions$currentQue2","handleContinueClick","nextQuestionIndex","children","className","src","href","style","width","index","onClick","disabled","includes"],"sources":["/Applications/MAMP/htdocs/gitrepo/tourclubkz/my-react-app/src/finaltest.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams, useNavigate, Link } from 'react-router-dom';\nimport Navpanmini from \"./navpanmini\";\nimport './fintest.css';\nimport { jwtDecode } from 'jwt-decode';\nimport { BASE_URL } from './config';\nfunction Finaltest() {\n  const [questions, setQuestions] = useState([]);\n    const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n    const [tries, setTries] = useState(0);\n    const [currentQuestionTries, setCurrentQuestionTries] = useState(0); // Новое состояние\n    const [incorrectAnswers, setIncorrectAnswers] = useState([]);\n    const [showContinueButton, setShowContinueButton] = useState(false);\n    const [progress, setProgress] = useState(0);\n    const { title, lesson } = useParams();\n    const titleWithSpaces = lesson.replace(/-/g, ' ');\n    const [correctAnswers, setCorrectAnswers] = useState([]);\n    const [answeredCorrectly, setAnsweredCorrectly] = useState(false);\nconst [testCompleted, setTestCompleted] = useState(false);\nconst navigate = useNavigate();\n\n    const token = localStorage.getItem('token');\n\n          \n    let decoded = jwtDecode(token);\n    \n    let user_id = decoded.sub;\n    const date = new Date(); // текущая дата и время\n    const year = date.getFullYear();\n    const month = String(date.getMonth() + 1).padStart(2, '0'); // добавляем ведущий ноль, если месяц меньше 10\n    const day = String(date.getDate()).padStart(2, '0'); // добавляем ведущий ноль, если день меньше 10\n    const hours = String(date.getHours()).padStart(2, '0');\n    const minutes = String(date.getMinutes()).padStart(2, '0');\n    const seconds = String(date.getSeconds()).padStart(2, '0');\n    \n    const formattedTimestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n    const shuffleArray = (array) => {\n      for (let i = array.length - 1; i > 0; i--) {\n        const j = Math.floor(Math.random() * (i + 1));\n        [array[i], array[j]] = [array[j], array[i]];\n      }\n      return array;\n    };\n    useEffect(() => {\n      const fetchData = async () => {\n        try {\n          const response = await fetch(`${BASE_URL}tourschoolphp/fintestlesson.php`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({ lesson: titleWithSpaces }),\n          });\n  \n          if (!response.ok) {\n            throw new Error('Ошибка при запросе данных');\n          }\n  \n          const data = await response.json();\n  \n          // Преобразовать данные в ожидаемый формат\n          const formattedQuestions = data.map((question) => ({\n            ...question,\n            options: shuffleArray([\n              question.incorrect_answer1,\n              question.incorrect_answer2,\n              question.incorrect_answer3,\n              question.correct_answer,\n            ]),\n          }));\n  \n          setQuestions(formattedQuestions);\n        } catch (error) {\n          console.error('Ошибка при отправке запроса:', error);\n        }\n      };\n  \n      fetchData();\n    }, [titleWithSpaces]);\n    const sendTestData = async () => {\n      try {\n        const response = await fetch(`${BASE_URL}tourschoolphp/fintestresult.php`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            user: user_id,\n            testid: questions[currentQuestionIndex]?.id,  // использование question_id\n            tries: tries,\n            total: questions.length,\n            timestamp: formattedTimestamp,\n          }),\n        });\n    \n        if (!response.ok) {\n          throw new Error('Ошибка при отправке данных на сервер');\n        }\n    \n        const data = await response.json();\n        console.log('Данные успешно отправлены на сервер:', data);\n      } catch (error) {\n        console.error('Ошибка при отправке данных на сервер:', error);\n      }\n    };\n       const handleOptionClick = (option) => {\n        if (answeredCorrectly) {\n            // Если уже был дан правильный ответ, не обрабатываем клик\n            return;\n        }\n \n\n\n        const isAnswerCorrect = option === questions[currentQuestionIndex].correct_answer;\n        setTries(tries + 1);\n  if (!isAnswerCorrect) {\n   \n    setCurrentQuestionTries(currentQuestionTries + 1);\n    setIncorrectAnswers([...incorrectAnswers, option]);\n  } else {\n    setCorrectAnswers([...correctAnswers, option]);\n    setShowContinueButton(true);\n    setCurrentQuestionTries(0);\n    setAnsweredCorrectly(true); // Устанавливаем флаг, что был дан правильный ответ\n    console.log(\"Current Question ID:\", questions[currentQuestionIndex]?.id);\n    sendTestData();\n\n  \n  }\n};\n\n\n\n\nconst handleContinueClick = () => {\n  const nextQuestionIndex = (currentQuestionIndex + 1) % questions.length;\n  if (nextQuestionIndex === 0) {\n      // Если это последний вопрос, то тест завершен\n      setTestCompleted(true);\n      navigate(`/courses/${title}/${lesson}/summary-page`);\n  } else {\n      setCurrentQuestionIndex(nextQuestionIndex);\n      setTries(0);\n      setIncorrectAnswers([]);\n      setShowContinueButton(false);\n      setProgress((currentQuestionIndex + 1) / questions.length * 100);\n      setCurrentQuestionTries(0);\n      setAnsweredCorrectly(false);\n  }\n};\n\n\n\n    console.log(tries);\n    return(\n        <>\n   <img className=\"form7\" src='/form7.svg'></img>\n  \n        {testCompleted ? (\n            <div>\n                <p>Тест завершен! Спасибо за участие.</p>\n                <a href=\"/your-link-here\">Ваша ссылка</a>\n            </div>\n        ) : (\n            <div className='full-pagetest'>\n            <div className='containertest'>\n                <div className='progress-barnorm'>\n        <div className='progress-bartest' style={{ width: `${progress}%` }}></div>\n        </div>\n        <div className='questionfin'>\n  {questions[currentQuestionIndex]?.question}\n  \n</div>\n        <div className='answersvar'>\n        {questions[currentQuestionIndex]?.options.map((option, index) => (\n        <button key={index} onClick={() => handleOptionClick(option)} disabled={incorrectAnswers.includes(option) || correctAnswers.includes(option)} className={incorrectAnswers.includes(option) ? 'incorrect' : correctAnswers.includes(option) ? 'correct' : ''}>\n          {incorrectAnswers.includes(option) ? `X ${option}` : correctAnswers.includes(option) ? `✓ ${option}` : option}\n        </button>\n      ))}\n        </div>\n        <div className='buttoncontin'>\n        {showContinueButton && \n          <button onClick={handleContinueClick}>\n            {currentQuestionIndex === questions.length - 1 ? 'Завершить тест' : 'Продолжить ->'}\n          </button>\n        } \n        </div>\n        </div>\n        \n        </div>\n     )}\n     \n     <Navpanmini />\n  \n    </>\n    )\n}\nexport default Finaltest; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}