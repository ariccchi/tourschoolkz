{"ast":null,"code":"import React,{useState,useEffect,useRef,useCallback}from'react';import{useParams}from'react-router-dom';import{jwtDecode}from'jwt-decode';import{BrowserRouter as Router,Route,Link,Switch}from'react-router-dom';import Navpanmini from'./navpanmini';import'./lessonmain.css';import{BASE_URL}from'./config';import{useNavigate}from\"react-router-dom\";// Импортируйте useNavigate\nimport YouTube from'react-youtube';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const LessonListPage=()=>{const navigate=useNavigate();// Используйте useNavigate\nconst[autoSelectedNav,setAutoSelectedNav]=useState(null);const[isManualNav,setIsManualNav]=useState(false);const{title,lesson}=useParams();const titleWithSpaces=lesson.replace(/-/g,' ');const courseWithSpaces=title.replace(/-/g,' ');const[responseData,setResponseData]=useState(null);const[loading,setLoading]=useState(true);const[videoEnding,setVideoEnding]=useState(false);const[secondsBeforeEndToShowButton,setSecondsBeforeEndToShowButton]=useState(30);const[videoEnded,setVideoEnded]=useState(false);const[allTestsPassed,setAllTestsPassed]=useState(false);const[intervalId,setIntervalId]=useState(null);const[containers,setContainers]=useState([]);const videoRef=useRef(null);const[selectedNav,setSelectedNav]=useState('Информация');const[isNavChangedManually,setIsNavChangedManually]=useState(false);const[currentContainerIndex,setCurrentContainerIndex]=useState(0);const[currentPage,setCurrentPage]=useState(1);const itemsPerPage=4;// Change this to the number of items you want per page\nconst[successfulTries,setSuccessfulTries]=useState({});const[unsuccessfulTries,setUnsuccessfulTries]=useState({});const[lastContainerIndex,setLastContainerIndex]=useState(null);const[lastUpdatedNav,setLastUpdatedNav]=useState(null);// Add this state\n// Calculate the total number of pages\nconst totalPages=Math.ceil(containers.length/itemsPerPage);const[shouldAutoSelectNav,setShouldAutoSelectNav]=useState(true);const[hasIncreased,setHasIncreased]=useState(false);const currentItems=containers.slice((currentPage-1)*itemsPerPage,currentPage*itemsPerPage);const[questionTries,setQuestionTries]=useState({});// Добавьте новое состояние\nconst[wasNavChangedManually,setWasNavChangedManually]=useState(false);const[autoSelectedContainers,setAutoSelectedContainers]=useState({});const[buttonClass,setButtonClass]=useState({});const token=localStorage.getItem('token');console.log=()=>{};let decoded=jwtDecode(token);let user_id=decoded.sub;const date=new Date();// текущая дата и время\nconst year=date.getFullYear();const month=String(date.getMonth()+1).padStart(2,'0');// добавляем ведущий ноль, если месяц меньше 10\nconst day=String(date.getDate()).padStart(2,'0');// добавляем ведущий ноль, если день меньше 10\nconst hours=String(date.getHours()).padStart(2,'0');const minutes=String(date.getMinutes()).padStart(2,'0');const seconds=String(date.getSeconds()).padStart(2,'0');const[duration,setDuration]=useState(0);const formattedTimestamp=\"\".concat(year,\"-\").concat(month,\"-\").concat(day,\" \").concat(hours,\":\").concat(minutes,\":\").concat(seconds);// ВОПРОСЫ\nconst[modalOpen,setModalOpen]=useState(false);const[selectedImage,setSelectedImage]=useState('');const[questions,setQuestions]=useState([]);const[incorrectMessages,setIncorrectMessages]=useState('');const[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);const[tries,setTries]=useState(0);const shuffleArray=array=>{for(let i=array.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[array[i],array[j]]=[array[j],array[i]];}return array;};const[currentTime,setCurrentTime]=useState(0);//ТЕРМИНЫ\nconst[termins,setTermins]=useState([]);const[answerCorrectness,setAnswerCorrectness]=useState({});//Doplinks\nconst[doplinks,setDoplinks]=useState([]);const openModal=imageURL=>{setSelectedImage(imageURL);setModalOpen(true);};const closeModal=()=>{setSelectedImage('');setModalOpen(false);};const onStateChange=event=>{if(videoRef.current){if(event.data===YouTube.PlayerState.PLAYING){const id=setInterval(()=>{videoRef.current.internalPlayer.getCurrentTime().then(time=>{console.log(\"\\u0412\\u0440\\u0435\\u043C\\u044F \\u0432\\u043E\\u0441\\u043F\\u0440\\u043E\\u0438\\u0437\\u0432\\u0435\\u0434\\u0435\\u043D\\u0438\\u044F: \".concat(Math.floor(time),\" \\u0441\\u0435\\u043A\\u0443\\u043D\\u0434\"));// handleTimeUpdate(time);\n});},1000);setIntervalId(id);}else{clearInterval(intervalId);}const interval=setInterval(()=>{if(videoRef.current&&videoRef.current.internalPlayer.getCurrentTime){// handleTimeUpdate(currentTime);\n}},1000);// Проверка каждую секунду\nreturn()=>{clearInterval(interval);};}};useEffect(()=>{handleTimeUpdate(currentTime);// someValue - это нужное вам значение, которое передается в handleTimeUpdate\n},[currentPage,currentTime]);useEffect(()=>{const checkResultAndShowVideo=async()=>{console.log(user_id);try{const checkResultResponse=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/Checkresulttoshowvideo.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user_id:user_id,title:titleWithSpaces,course:courseWithSpaces})});if(!checkResultResponse.ok){throw new Error('Ошибка при проверке результата для отображения видео');}const checkResultData=await checkResultResponse.json();// Check if checkResultData is an array before accessing its elements\nif(Array.isArray(checkResultData)&&checkResultData.length>0){// Вывод данных из PHP-скрипта в консоль\nconsole.log('Response from PHP script:',checkResultData);// Извлекаем значение available_at из первого элемента массива\nconst availableAt=checkResultData[0].available_at;console.log('available_at:',availableAt);// Получаем текущее время клиента\nconst clientTime=new Date();// Получаем время с сервера и преобразуем его в объект Date (время сервера считаем в UTC)\nconst serverTimeUTC=new Date(availableAt);// Получаем смещение временной зоны клиента\nconst clientTimezoneOffset=clientTime.getTimezoneOffset();// Корректируем время сервера на смещение временной зоны клиента\nconst serverTime=new Date(serverTimeUTC.getTime()-clientTimezoneOffset*60000);console.log(serverTimeUTC);// Сравниваем время с сервера и времени клиента\nif(serverTime>clientTime){// Если время на сервере больше времени клиента, выполняем перенаправление\nnavigate('/courses');}else{}}}catch(error){// console.error('Ошибка при проверке результата для отображения видео:', error);\n}};checkResultAndShowVideo();},[user_id,titleWithSpaces,courseWithSpaces]);useEffect(()=>{const fetchData=async()=>{try{const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/testlesson.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lesson:titleWithSpaces})});if(!response.ok){throw new Error('Ошибка при запросе данных');}const data=await response.json();// Check if data is an array before mapping over it\nif(Array.isArray(data)){// Преобразовать данные в ожидаемый формат и перемешать варианты ответов\nconst formattedQuestions=data.map(question=>({...question,options:shuffleArray([question.incorrect_answer1,question.incorrect_answer2,question.incorrect_answer3,question.correct_answer])}));setQuestions(formattedQuestions);}}catch(error){console.error('Ошибка при отправке запроса:',error);}};fetchData();},[titleWithSpaces]);// Измените handleNavClick, чтобы устанавливать wasNavChangedManually в true\nconst handleNavClick=navType=>{setIsNavChangedManually(true);setWasNavChangedManually(true);setSelectedNav(navType);};useEffect(()=>{console.log(\"Current Page: \".concat(currentPage,\", Selected Nav: \").concat(selectedNav));console.log(videoRef.current);},[currentPage,selectedNav]);// Измените handleTimeUpdate, чтобы проверять wasNavChangedManually, а не isNavChangedManually\nconst handleTimeUpdate=(aaa,curcur)=>{const timeToEnd=duration-aaa;// Показать кнопку за N секунд до окончания видео\nif(timeToEnd<=secondsBeforeEndToShowButton&&!videoEnding){setVideoEnding(true);}setQuestions(questions=>{let newSelectedNav=selectedNav;let newcurrentQuestionIndex=currentQuestionIndex;const updatedQuestions=questions.map((question,index)=>{if(!question.isShuffled){question.options=shuffleArray(question.options);question.isShuffled=true;}if(question.isVisible){setSelectedNav(question.type);videoRef.current.internalPlayer.pauseVideo();}const timeIn=timeToSeconds(question.time_in);const isVisible=aaa>=timeIn;if(isVisible&&!question.isVisible){// Check if the question type is already auto-selected\nif(!autoSelectedContainers[question.id]){newSelectedNav=question.type;// Update autoSelectedContainers\nsetAutoSelectedContainers(autoSelectedContainers=>({...autoSelectedContainers,[question.id]:true}));}newcurrentQuestionIndex=index;}if(newSelectedNav!==selectedNav){setSelectedNav(newSelectedNav);}return{...question,isVisible};});return updatedQuestions;});setContainers(containers=>{let newSelectedNav=selectedNav;let newCurrentContainerIndex=currentContainerIndex;const updatedContainers=containers.map((container,index)=>{const timeIn=timeToSeconds(container.time_in);const isVisible=aaa>=timeIn;if(isVisible&&!container.isVisible){if(index!==newCurrentContainerIndex){// Проверьте, был ли контейнер уже автоматически выбран\nif(!autoSelectedContainers[container.id]){newSelectedNav=container.type;// Обновите autoSelectedContainers\nsetAutoSelectedContainers(autoSelectedContainers=>({...autoSelectedContainers,[container.id]:true}));}newCurrentContainerIndex=index;}}return{...container,isVisible};});if(newSelectedNav!==selectedNav){setSelectedNav(newSelectedNav);}setCurrentContainerIndex(newCurrentContainerIndex);if(newCurrentContainerIndex!==lastContainerIndex){setCurrentContainerIndex(newCurrentContainerIndex);setLastContainerIndex(newCurrentContainerIndex);}if(newCurrentContainerIndex+1>currentPage*itemsPerPage){setCurrentPage(prevPage=>prevPage+0.5);}if(videoRef.current){console.log(newCurrentContainerIndex,'time',aaa,\"item\",itemsPerPage,\"currentPage\",currentPage);}setLastContainerIndex(newCurrentContainerIndex);return updatedContainers;});setTermins(termins=>{let newSelectedNav=selectedNav;let newCurrentContainerIndex=currentContainerIndex;const updatedContainers=termins.map((termin,index)=>{const timeIn=timeToSeconds(termin.time_in);const isVisible=currentTime>=timeIn;if(isVisible&&!termin.isVisible){if(index!==newCurrentContainerIndex){// Проверьте, был ли контейнер уже автоматически выбран\nif(!autoSelectedContainers[termin.id]){newSelectedNav=termin.type;// Обновите autoSelectedContainers\nsetAutoSelectedContainers(autoSelectedContainers=>({...autoSelectedContainers,[termin.id]:true}));}newCurrentContainerIndex=index;}}return{...termin,isVisible};});if(newSelectedNav!==selectedNav){setSelectedNav(newSelectedNav);}setCurrentContainerIndex(newCurrentContainerIndex);if(newCurrentContainerIndex!==lastContainerIndex){setCurrentContainerIndex(newCurrentContainerIndex);setLastContainerIndex(newCurrentContainerIndex);}if(newCurrentContainerIndex+1>currentPage*itemsPerPage){setCurrentPage(currentPage=>currentPage+0.5);}setLastContainerIndex(newCurrentContainerIndex);return updatedContainers;});};const handleVideoEnd=()=>{setVideoEnded(true);setVideoEnding(false);// Сбросить состояние, чтобы не показывать кнопку после окончания видео\n};// Измените useEffect, чтобы сбрасывать wasNavChangedManually обратно в false, когда видео достигает конца\nuseEffect(()=>{if(videoRef.current){const currentTimePromise=videoRef.current.internalPlayer.getCurrentTime();currentTimePromise.then(currentTime=>{if(videoRef.current&&currentTime>=duration){setWasNavChangedManually(false);}});}},[videoRef.current]);useEffect(()=>{const fetchData=async()=>{try{const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/lessonvideo.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lesson:titleWithSpaces,course:courseWithSpaces})});if(!response.ok){throw new Error('Ошибка при запросе данных');}const responseBody=await response.text();const data=JSON.parse(responseBody);setResponseData(data);}catch(error){console.error('Ошибка при отправке запроса:',error);}finally{// Устанавливаем статус загрузки в false после завершения запроса\nsetLoading(false);}try{const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/containersmodel.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lesson:titleWithSpaces})});if(!response.ok){throw new Error('Ошибка при запросе данных');}const responseBody=await response.text();const data=JSON.parse(responseBody);setContainers(data.map(container=>({...container,key:container.id})));}catch(error){// console.error('Ошибка при отправке запроса:', error);\n}try{const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/termins.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lesson:titleWithSpaces})});if(!response.ok){throw new Error('Ошибка при запросе данных');}const responseBody=await response.text();const data=JSON.parse(responseBody);setTermins(data.map(termin=>({...termin,key:termin.id})));}catch(error){}try{const response=await fetch(\"\".concat(BASE_URL,\"tourschoolphp/doplink.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({lesson:titleWithSpaces})});if(!response.ok){throw new Error('Ошибка при запросе данных');}const responseBody=await response.text();const data=JSON.parse(responseBody);if(Array.isArray(data)){setDoplinks(data.map(doplink=>({...doplink,key:doplink.id})));}}catch(error){console.error('Ошибка при отправке запроса:',error);}};fetchData();// function onPlayerReady(event) {\n//   const intervalId = setInterval(updateTime, 1000); // обновляйте время каждую секунду\n//   // Очистите интервал при размонтировании\n//   return () => {\n//     clearInterval(intervalId);\n//   };\n// }\n// // Обновите время воспроизведения\n// function updateTime() {\n//   const currentTime = videoRef.getCurrentTime();\n//   handleTimeUpdate(currentTime); // здесь ваша функция handleTimeUpdate\n// }\n},[titleWithSpaces,containers,termins,videoEnding]);const timeToSeconds=time=>{let parts=time.split(':');return+parts[0]*60*60+ +parts[1]*60+ +parts[2];};const handleOptionClick=(option,questionId,index)=>{const currentQuestion=questions.find(q=>q.id===questionId);const isAnswerCorrect=option===currentQuestion.correct_answer;setAnswerCorrectness(prevState=>({...prevState,[\"\".concat(questionId,\"-\").concat(index)]:isAnswerCorrect}));setButtonClass(prevButtonClass=>({...prevButtonClass,[\"\".concat(questionId,\"-\").concat(index)]:isAnswerCorrect?'buttonindex-correct':'buttonindex-incorrect'}));// Update the class name for the clicked button based on the correctness of the answer\nconst updatedOptions=[...questions[currentQuestionIndex].options];setQuestions(prevQuestions=>{const updatedQuestions=[...prevQuestions];updatedQuestions[currentQuestionIndex]={...updatedQuestions[currentQuestionIndex],options:updatedOptions};return updatedQuestions;});// Rest of your code remains unchanged\nsetQuestionTries(prevTries=>{const currentTries=prevTries[questionId]||{total:0,lastAttempt:0};const updatedTries={...prevTries,[questionId]:{total:currentTries.total+1,lastAttempt:isAnswerCorrect?currentTries.lastAttempt+1:currentTries.lastAttempt}};if(!isAnswerCorrect&&currentTries.total>=2){setIncorrectMessages(prevMessages=>({...prevMessages,[questionId]:\"\\u041D\\u0435\\u043F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442. \\u041F\\u0440\\u0430\\u0432\\u0438\\u043B\\u044C\\u043D\\u044B\\u0439 \\u043E\\u0442\\u0432\\u0435\\u0442: \".concat(currentQuestion.correct_answer)}));// Do not reset the total count here\nupdatedTries[questionId]={total:currentTries.total,lastAttempt:0};}else{setIncorrectMessages(prevMessages=>({...prevMessages,[questionId]:isAnswerCorrect?'':'Неправильный ответ. Попробуйте еще раз'}));if(isAnswerCorrect){var _updatedTries$questio;setQuestions(prevQuestions=>prevQuestions.filter(q=>q.id!==currentQuestion.id));setCurrentQuestionIndex(prevIndex=>{const nextIndex=prevIndex+1;return nextIndex<questions.length?nextIndex:0;});videoRef.current.internalPlayer.playVideo();// Send data to the server only for correct answers\nfetch(\"\".concat(BASE_URL,\"tourschoolphp/testresult.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user:user_id,testid:currentQuestion.id,tries:((_updatedTries$questio=updatedTries[questionId])===null||_updatedTries$questio===void 0?void 0:_updatedTries$questio.total)||0,timestamp:formattedTimestamp})}).then(response=>{if(!response.ok){throw new Error('Ошибка при сохранении ответа на сервере');}return response.text();}).then(data=>{console.log('Server response:',data);return JSON.parse(data);}).catch(error=>{console.error('Ошибка при отправке запроса:',error);});}}return updatedTries;});if(isAnswerCorrect){setSuccessfulTries(prev=>({...prev,[questionId]:(prev[questionId]||0)+1}));}else{setUnsuccessfulTries(prev=>({...prev,[questionId]:(prev[questionId]||0)+1}));};if(questions.length===1){// If there are no more questions, set allTestsPassed to true\nsetAllTestsPassed(true);}};useEffect(()=>{let maxTimeOut=0;let newSelectedNav=selectedNav;// Keep track of the selected navigation\nif(videoRef.current){const currentTimePromise=videoRef.current.internalPlayer.getCurrentTime();currentTimePromise.then(currentTime=>{containers.forEach(container=>{let timeIn=timeToSeconds(container.time_in);let isVisible=videoRef.current&&currentTime>=timeIn&&currentTime;});if(videoRef.current&&currentTime>maxTimeOut){setIsNavChangedManually(false);setShouldAutoSelectNav(true);// Set shouldAutoSelectNav to true here\n}});}},[containers,videoRef.current,isNavChangedManually]);const videoOptions={height:'500px',// Высота плеера\nwidth:'100%',// Ширина плеера\nplayerVars:{// Параметры плеера\nautoplay:1,// Автовоспроизведение видео\ncontrols:1,// Отображение элементов управления\nshowinfo:0,// Отображение информации о видео\nmodestbranding:0// Удаление логотипа YouTube\n}};useEffect(()=>{let maxTimeOut=0;let newSelectedNav=selectedNav;// Keep track of the selected navigation\nif(videoRef.current){const currentTimePromise=videoRef.current.internalPlayer.getCurrentTime();currentTimePromise.then(currentTime=>{termins.forEach(termin=>{let timeIn=timeToSeconds(termin.time_in);let isVisible=videoRef.current&&currentTime>=timeIn&&currentTime;});if(videoRef.current&&currentTime>maxTimeOut){setIsNavChangedManually(false);setShouldAutoSelectNav(true);// Set shouldAutoSelectNav to true here\n}});}},[termins,videoRef.current,isNavChangedManually]);useEffect(()=>{let maxTimeOut=0;let newSelectedNav=selectedNav;// Keep track of the selected navigation\nif(videoRef.current){const currentTimePromise=videoRef.current.internalPlayer.getCurrentTime();currentTimePromise.then(currentTime=>{questions.forEach(question=>{let timeIn=timeToSeconds(question.time_in);let isVisible=videoRef.current&&currentTime>=timeIn&&currentTime;});if(videoRef.current&&currentTime>maxTimeOut){setIsNavChangedManually(false);setShouldAutoSelectNav(true);// Set shouldAutoSelectNav to true here\n}});}},[questions,videoRef.current,isNavChangedManually]);const handleFinishLesson=()=>{fetch(\"\".concat(BASE_URL,\"tourschoolphp/finishlesson.php\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user:user_id,lesson:titleWithSpaces,date:formattedTimestamp})}).then(response=>{if(!response.ok){throw new Error('Ошибка при сохранении ответа на сервере');}return response.text();}).then(data=>{console.log('Server response:',data);return JSON.parse(data);}).catch(error=>{console.error('Ошибка при отправке запроса:',error);});};useEffect(()=>{const fetchCurrentTime=async()=>{if(videoRef.current&&videoRef.current.internalPlayer&&videoRef.current.internalPlayer.getCurrentTime){const time=await videoRef.current.internalPlayer.getCurrentTime();setCurrentTime(time);}if(videoRef.current&&videoRef.current.internalPlayer&&videoRef.current.internalPlayer.getDuration){const duration=await videoRef.current.internalPlayer.getDuration();setDuration(duration);}};fetchCurrentTime();const intervalId=setInterval(fetchCurrentTime,1000);// Update every second\nreturn()=>clearInterval(intervalId);// Clean up on unmount\n},[]);if(loading){return/*#__PURE__*/_jsx(\"div\",{children:\"\\u0417\\u0430\\u0433\\u0440\\u0443\\u0437\\u043A\\u0430...\"});}return/*#__PURE__*/_jsx(\"div\",{className:\"connews\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"containerlesson\",children:[/*#__PURE__*/_jsx(\"h1\",{children:titleWithSpaces}),/*#__PURE__*/_jsx(\"div\",{className:\"containervideoimg\",children:videoRef&&responseData&&/*#__PURE__*/_jsx(\"div\",{className:\"videoless\",children:/*#__PURE__*/_jsx(YouTube,{videoId:responseData,opts:videoOptions,onStateChange:onStateChange,ref:videoRef})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"containerwithinfo\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"linewithtypes\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"textnav \".concat(selectedNav==='Термины'||!isManualNav==='Термины'?'active':''),onClick:()=>handleNavClick('Термины'),children:\"\\u0422\\u0435\\u0440\\u043C\\u0438\\u043D\\u044B\"}),/*#__PURE__*/_jsx(\"div\",{className:\"textnav \".concat(selectedNav==='Тест'||!isManualNav==='Тест'?'active':''),onClick:()=>handleNavClick('Тест'),children:\"\\u0422\\u0435\\u0441\\u0442\"}),/*#__PURE__*/_jsx(\"div\",{className:\"textnav \".concat(selectedNav==='Информация'||!isManualNav==='Информация'?'active':''),onClick:()=>handleNavClick('Информация'),children:\"\\u0418\\u043D\\u0444\\u043E\\u0440\\u043C\\u0430\\u0446\\u0438\\u044F\"}),/*#__PURE__*/_jsx(\"div\",{className:\"textnav \".concat(selectedNav==='Дополнительная информация'?'active':''),onClick:()=>handleNavClick('Дополнительная информация'),children:\"\\u0421\\u0441\\u044B\\u043B\\u043A\\u0438\"})]}),allTestsPassed&&videoEnding&&/*#__PURE__*/_jsx(\"a\",{href:\"/courses/\".concat(title,\"/\").concat(lesson,\"/summary-page\"),children:/*#__PURE__*/_jsx(\"button\",{className:\"urokend\",onClick:handleFinishLesson,children:\"\\u0417\\u0430\\u0432\\u0435\\u0440\\u0448\\u0438\\u0442\\u044C \\u0443\\u0440\\u043E\\u043A\"})}),questions.map(question=>{if(videoRef.current){let timeIn=timeToSeconds(question.time_in);let isVisible=videoRef.current&&currentTime>=timeIn;// Only render the question if it's both visible and its type matches the selected nav\nif(isVisible&&(selectedNav===question.type||!isManualNav===question.type)){return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"testinfo\",style:{display:'flex',margin:'5px 0'},children:[/*#__PURE__*/_jsx(\"h2\",{children:question.question}),/*#__PURE__*/_jsx(\"div\",{className:\"buttoncontless\",children:question.options.map((option,index)=>/*#__PURE__*/_jsx(\"button\",{className:buttonClass[\"\".concat(question.id,\"-\").concat(index)]||\"buttonindex\",onClick:()=>handleOptionClick(option,question.id,index),children:option},index))})]}),/*#__PURE__*/_jsx(\"br\",{})]},question.id);}return null;}}),currentItems.map(container=>{let timeIn=timeToSeconds(container.time_in);let isVisible=videoRef.current&&currentTime>=timeIn;if(isVisible&&(selectedNav===container.type||!isManualNav===container.type)){if(isNavChangedManually&&selectedNav!==container.type){return null;}// Проверка, является ли текст ссылкой на изображение\nconst imageFormats=['.jpg','.png','.jpeg','.gif','.bmp','.svg','.webp'];const isImage=imageFormats.some(format=>container.text.includes(format));return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(React.Fragment,{children:/*#__PURE__*/_jsx(\"div\",{className:\"textinfo\",style:{display:'block',margin:'10px 0'// Add top and bottom margin of 10 pixels\n},children:isImage?/*#__PURE__*/_jsx(\"img\",{src:\"\".concat(BASE_URL,\"tourschoolphp/\").concat(container.text),alt:\"123123\",width:\"400\",onClick:()=>openModal(\"\".concat(BASE_URL,\"tourschoolphp/\").concat(container.text))}):container.text.split('\\n').map((line,index)=>/*#__PURE__*/_jsxs(React.Fragment,{children:[line,/*#__PURE__*/_jsx(\"br\",{})]},index))})},container.id)});}return null;}),termins.map(termin=>{let timeIn=timeToSeconds(termin.time_in);let isVisible=videoRef.current&&currentTime>=timeIn;if(isVisible&&(selectedNav===termin.type||!isManualNav===termin.type)){// Если пользователь вручную переключился на другой блок, не обновляйте блок автоматически\nif(isNavChangedManually&&selectedNav!==termin.type){return null;}return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"textinfo\",style:{display:'block',margin:'5px 0'// Add top and bottom margin of 10 pixels\n},children:termin.text}),/*#__PURE__*/_jsx(\"br\",{})]},termin.id);}return null;}),selectedNav==='Дополнительная информация'&&doplinks.map(doplink=>{// Если selectedNav - это переменная, которая должна быть обновлена, необходимо использовать '=' вместо ';'\nreturn/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsx(\"div\",{className:\"textinfo\",style:{display:'block',margin:'5px 0'// Add top and bottom margin of 10 pixels\n},children:/*#__PURE__*/_jsx(\"a\",{href:doplink.text,children:doplink.text})})},doplink.id);}),modalOpen&&/*#__PURE__*/_jsxs(\"div\",{className:\"modal7\",children:[/*#__PURE__*/_jsx(\"span\",{className:\"close7\",onClick:closeModal,children:\"\\xD7\"}),/*#__PURE__*/_jsx(\"img\",{className:\"modal-content7\",src:selectedImage,alt:\"Enlarged Image\"})]}),/*#__PURE__*/_jsx(Navpanmini,{})]})]})});};export default LessonListPage;","map":{"version":3,"names":["React","useState","useEffect","useRef","useCallback","useParams","jwtDecode","BrowserRouter","Router","Route","Link","Switch","Navpanmini","BASE_URL","useNavigate","YouTube","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","LessonListPage","navigate","autoSelectedNav","setAutoSelectedNav","isManualNav","setIsManualNav","title","lesson","titleWithSpaces","replace","courseWithSpaces","responseData","setResponseData","loading","setLoading","videoEnding","setVideoEnding","secondsBeforeEndToShowButton","setSecondsBeforeEndToShowButton","videoEnded","setVideoEnded","allTestsPassed","setAllTestsPassed","intervalId","setIntervalId","containers","setContainers","videoRef","selectedNav","setSelectedNav","isNavChangedManually","setIsNavChangedManually","currentContainerIndex","setCurrentContainerIndex","currentPage","setCurrentPage","itemsPerPage","successfulTries","setSuccessfulTries","unsuccessfulTries","setUnsuccessfulTries","lastContainerIndex","setLastContainerIndex","lastUpdatedNav","setLastUpdatedNav","totalPages","Math","ceil","length","shouldAutoSelectNav","setShouldAutoSelectNav","hasIncreased","setHasIncreased","currentItems","slice","questionTries","setQuestionTries","wasNavChangedManually","setWasNavChangedManually","autoSelectedContainers","setAutoSelectedContainers","buttonClass","setButtonClass","token","localStorage","getItem","console","log","decoded","user_id","sub","date","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","duration","setDuration","formattedTimestamp","concat","modalOpen","setModalOpen","selectedImage","setSelectedImage","questions","setQuestions","incorrectMessages","setIncorrectMessages","currentQuestionIndex","setCurrentQuestionIndex","tries","setTries","shuffleArray","array","i","j","floor","random","currentTime","setCurrentTime","termins","setTermins","answerCorrectness","setAnswerCorrectness","doplinks","setDoplinks","openModal","imageURL","closeModal","onStateChange","event","current","data","PlayerState","PLAYING","id","setInterval","internalPlayer","getCurrentTime","then","time","clearInterval","interval","handleTimeUpdate","checkResultAndShowVideo","checkResultResponse","fetch","method","headers","body","JSON","stringify","course","ok","Error","checkResultData","json","Array","isArray","availableAt","available_at","clientTime","serverTimeUTC","clientTimezoneOffset","getTimezoneOffset","serverTime","getTime","error","fetchData","response","formattedQuestions","map","question","options","incorrect_answer1","incorrect_answer2","incorrect_answer3","correct_answer","handleNavClick","navType","aaa","curcur","timeToEnd","newSelectedNav","newcurrentQuestionIndex","updatedQuestions","index","isShuffled","isVisible","type","pauseVideo","timeIn","timeToSeconds","time_in","newCurrentContainerIndex","updatedContainers","container","prevPage","termin","handleVideoEnd","currentTimePromise","responseBody","text","parse","key","doplink","parts","split","handleOptionClick","option","questionId","currentQuestion","find","q","isAnswerCorrect","prevState","prevButtonClass","updatedOptions","prevQuestions","prevTries","currentTries","total","lastAttempt","updatedTries","prevMessages","_updatedTries$questio","filter","prevIndex","nextIndex","playVideo","user","testid","timestamp","catch","prev","maxTimeOut","forEach","videoOptions","height","width","playerVars","autoplay","controls","showinfo","modestbranding","handleFinishLesson","fetchCurrentTime","getDuration","children","className","videoId","opts","ref","onClick","href","style","display","margin","imageFormats","isImage","some","format","includes","src","alt","line"],"sources":["/Applications/MAMP/htdocs/gitrepo/tourclubkz/my-react-app/src/lessonmain.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jwtDecode } from 'jwt-decode';\nimport { BrowserRouter as Router, Route, Link, Switch } from 'react-router-dom';\nimport Navpanmini from './navpanmini';\nimport './lessonmain.css';\nimport { BASE_URL } from './config';\nimport { useNavigate } from \"react-router-dom\"; // Импортируйте useNavigate\nimport YouTube from 'react-youtube';\nconst LessonListPage = () => {\n  const navigate = useNavigate(); // Используйте useNavigate\n  const [autoSelectedNav, setAutoSelectedNav] = useState(null);\n  const [isManualNav, setIsManualNav] = useState(false);\nconst { title, lesson } = useParams();\nconst titleWithSpaces = lesson.replace(/-/g, ' ');\nconst courseWithSpaces = title.replace(/-/g, ' ');\nconst [responseData, setResponseData] = useState(null);\nconst [loading, setLoading] = useState(true);\nconst [videoEnding, setVideoEnding] = useState(false);\nconst [secondsBeforeEndToShowButton, setSecondsBeforeEndToShowButton] = useState(30);\nconst [videoEnded, setVideoEnded] = useState(false);\nconst [allTestsPassed, setAllTestsPassed] = useState(false);\nconst [intervalId, setIntervalId] = useState(null);\n\nconst [containers, setContainers] = useState([]);\nconst videoRef = useRef(null);\nconst [selectedNav, setSelectedNav] = useState('Информация');\nconst [isNavChangedManually, setIsNavChangedManually] = useState(false);\nconst [currentContainerIndex, setCurrentContainerIndex] = useState(0);\nconst [currentPage, setCurrentPage] = useState(1);\nconst itemsPerPage = 4; // Change this to the number of items you want per page\nconst [successfulTries, setSuccessfulTries] = useState({});\nconst [unsuccessfulTries, setUnsuccessfulTries] = useState({});\nconst [lastContainerIndex, setLastContainerIndex] = useState(null);\nconst [lastUpdatedNav, setLastUpdatedNav] = useState(null); // Add this state\n // Calculate the total number of pages\n const totalPages = Math.ceil(containers.length / itemsPerPage);\n const [shouldAutoSelectNav, setShouldAutoSelectNav] = useState(true);\n const [hasIncreased, setHasIncreased] = useState(false);\n const currentItems = containers.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n const [questionTries, setQuestionTries] = useState({});\n// Добавьте новое состояние\nconst [wasNavChangedManually, setWasNavChangedManually] = useState(false);\nconst [autoSelectedContainers, setAutoSelectedContainers] = useState({})\nconst [buttonClass, setButtonClass] = useState({});\nconst token = localStorage.getItem('token');\nconsole.log = () => {};\n\nlet decoded = jwtDecode(token);\n\nlet user_id = decoded.sub;\nconst date = new Date(); // текущая дата и время\nconst year = date.getFullYear();\nconst month = String(date.getMonth() + 1).padStart(2, '0'); // добавляем ведущий ноль, если месяц меньше 10\nconst day = String(date.getDate()).padStart(2, '0'); // добавляем ведущий ноль, если день меньше 10\nconst hours = String(date.getHours()).padStart(2, '0');\nconst minutes = String(date.getMinutes()).padStart(2, '0');\nconst seconds = String(date.getSeconds()).padStart(2, '0');\nconst [duration, setDuration] = useState(0);\nconst formattedTimestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n// ВОПРОСЫ\nconst [modalOpen, setModalOpen] = useState(false);\n  const [selectedImage, setSelectedImage] = useState('');\nconst [questions, setQuestions] = useState([]);\nconst [incorrectMessages, setIncorrectMessages] = useState('');\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [tries, setTries] = useState(0);\n  const shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const [currentTime, setCurrentTime] = useState(0);\n\n//ТЕРМИНЫ\nconst [termins, setTermins] = useState([]);\n\nconst [answerCorrectness, setAnswerCorrectness] = useState({});\n//Doplinks\nconst [doplinks, setDoplinks] = useState([]);\n\nconst openModal = (imageURL) => {\n  setSelectedImage(imageURL);\n  setModalOpen(true);\n};\n\nconst closeModal = () => {\n  setSelectedImage('');\n  setModalOpen(false);\n};\n\n\nconst onStateChange = (event) => {\n  \n  if(videoRef.current) {\n  if (event.data === YouTube.PlayerState.PLAYING) {\n    const id = setInterval(() => {\n      videoRef.current.internalPlayer.getCurrentTime().then((time) => {\n        console.log(`Время воспроизведения: ${Math.floor(time)} секунд`);\n        // handleTimeUpdate(time);\n      });\n    }, 1000);\n    setIntervalId(id);\n  } else {\n    clearInterval(intervalId);\n  }\n\n  const interval = setInterval(() => {\n    if (videoRef.current && videoRef.current.internalPlayer.getCurrentTime) {\n      // handleTimeUpdate(currentTime);\n    }\n  }, 1000); // Проверка каждую секунду\n\n  return () => {\n    clearInterval(interval);\n  };\n}\n};\nuseEffect(() => {\n  handleTimeUpdate(currentTime); // someValue - это нужное вам значение, которое передается в handleTimeUpdate\n}, [currentPage, currentTime]);\nuseEffect(() => {\n  const checkResultAndShowVideo = async () => {\n    console.log(user_id);\n\n    try {\n      const checkResultResponse = await fetch(`${BASE_URL}tourschoolphp/Checkresulttoshowvideo.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          user_id: user_id,\n          title: titleWithSpaces,\n          course: courseWithSpaces,\n        }),\n      });\n\n      if (!checkResultResponse.ok) {\n        throw new Error('Ошибка при проверке результата для отображения видео');\n      }\n\n      const checkResultData = await checkResultResponse.json();\n\n      // Check if checkResultData is an array before accessing its elements\n      if (Array.isArray(checkResultData) && checkResultData.length > 0) {\n        // Вывод данных из PHP-скрипта в консоль\n        console.log('Response from PHP script:', checkResultData);\n\n        // Извлекаем значение available_at из первого элемента массива\n        const availableAt = checkResultData[0].available_at;\n        console.log('available_at:', availableAt);\n\n        // Получаем текущее время клиента\n        const clientTime = new Date();\n\n        // Получаем время с сервера и преобразуем его в объект Date (время сервера считаем в UTC)\n        const serverTimeUTC = new Date(availableAt);\n\n        // Получаем смещение временной зоны клиента\n        const clientTimezoneOffset = clientTime.getTimezoneOffset();\n\n        // Корректируем время сервера на смещение временной зоны клиента\n        const serverTime = new Date(serverTimeUTC.getTime() - clientTimezoneOffset * 60000);\n        console.log(serverTimeUTC);\n\n        // Сравниваем время с сервера и времени клиента\n        if (serverTime > clientTime) {\n          // Если время на сервере больше времени клиента, выполняем перенаправление\n          navigate('/courses');\n        } else {\n     \n        }\n      } \n    } catch (error) {\n      // console.error('Ошибка при проверке результата для отображения видео:', error);\n    }\n  };\n\n  checkResultAndShowVideo();\n}, [user_id, titleWithSpaces, courseWithSpaces]);\n\n\nuseEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch(`${BASE_URL}tourschoolphp/testlesson.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при запросе данных');\n      }\n\n      const data = await response.json();\n\n      // Check if data is an array before mapping over it\n      if (Array.isArray(data)) {\n        // Преобразовать данные в ожидаемый формат и перемешать варианты ответов\n        const formattedQuestions = data.map((question) => ({\n          ...question,\n          options: shuffleArray([\n            question.incorrect_answer1,\n            question.incorrect_answer2,\n            question.incorrect_answer3,\n            question.correct_answer,\n          ]),\n        }));\n\n        setQuestions(formattedQuestions);\n      }\n    } catch (error) {\n      console.error('Ошибка при отправке запроса:', error);\n    }\n  };\n\n  fetchData();\n}, [titleWithSpaces]);\n\n\n \n  \n\n\n  \n// Измените handleNavClick, чтобы устанавливать wasNavChangedManually в true\nconst handleNavClick = (navType) => {\n  setIsNavChangedManually(true);\n  setWasNavChangedManually(true);\n  setSelectedNav(navType);\n};\nuseEffect(() => {\n  console.log(`Current Page: ${currentPage}, Selected Nav: ${selectedNav}`);\n  console.log(videoRef.current);\n \n}, [currentPage, selectedNav]);\n\n// Измените handleTimeUpdate, чтобы проверять wasNavChangedManually, а не isNavChangedManually\nconst handleTimeUpdate = (aaa, curcur) => {\n \n\n    const timeToEnd = duration - aaa;\n\n    // Показать кнопку за N секунд до окончания видео\n    if (timeToEnd <= secondsBeforeEndToShowButton && !videoEnding) {\n      setVideoEnding(true);\n    }\n    setQuestions((questions) => {\n      let newSelectedNav = selectedNav;\n      let newcurrentQuestionIndex = currentQuestionIndex;\n  \n      const updatedQuestions = questions.map((question, index) => {\n        if (!question.isShuffled) {\n          question.options = shuffleArray(question.options);\n          question.isShuffled = true;\n        }\n        if (question.isVisible) {\n          setSelectedNav(question.type);\n          videoRef.current.internalPlayer.pauseVideo();\n        \n        }\n  \n    \n        const timeIn = timeToSeconds(question.time_in);\n        const isVisible = aaa >= timeIn;\n  \n       \n  if (isVisible && !question.isVisible)  {\n          // Check if the question type is already auto-selected\n          if (!autoSelectedContainers[question.id]) {\n            newSelectedNav = question.type;\n            // Update autoSelectedContainers\n            setAutoSelectedContainers((autoSelectedContainers) => ({\n              ...autoSelectedContainers,\n              [question.id]: true,\n            }));\n          }\n          newcurrentQuestionIndex = index;\n        }\n        if (newSelectedNav !== selectedNav) {\n          setSelectedNav(newSelectedNav);\n        }\n        return { ...question, isVisible };\n      });\n    \n      return updatedQuestions;\n    })\n    setContainers((containers) => {\n      let newSelectedNav = selectedNav;\n      let newCurrentContainerIndex = currentContainerIndex;\n  \n      const updatedContainers = containers.map((container, index) => {\n      \n        const timeIn = timeToSeconds(container.time_in);\n        const isVisible = aaa >= timeIn;\n  \n        if (isVisible && !container.isVisible) {\n          if (index !== newCurrentContainerIndex) {\n            // Проверьте, был ли контейнер уже автоматически выбран\n            if (!autoSelectedContainers[container.id]) {\n              newSelectedNav = container.type;\n              // Обновите autoSelectedContainers\n              setAutoSelectedContainers((autoSelectedContainers) => ({\n                ...autoSelectedContainers,\n                [container.id]: true,\n              }));\n            }\n            newCurrentContainerIndex = index;\n          }\n        }\n       \n        return { ...container, isVisible };\n  \n        \n      });\n  \n      if (newSelectedNav !== selectedNav) {\n        setSelectedNav(newSelectedNav);\n      }\n    \n      setCurrentContainerIndex(newCurrentContainerIndex);\n      if (newCurrentContainerIndex !== lastContainerIndex) {\n        setCurrentContainerIndex(newCurrentContainerIndex);\n        setLastContainerIndex(newCurrentContainerIndex);\n      }\n      \n      if (newCurrentContainerIndex + 1 > currentPage * itemsPerPage) {\n        setCurrentPage((prevPage) => prevPage + 0.5);\n      }\n      \n      if (videoRef.current) {\n        console.log(newCurrentContainerIndex, 'time', aaa, \"item\", itemsPerPage, \"currentPage\", currentPage);\n      }\n  \n      setLastContainerIndex(newCurrentContainerIndex);\n  \n      return updatedContainers;\n    });\n  setTermins((termins) => {\n    let newSelectedNav = selectedNav;\n    let newCurrentContainerIndex = currentContainerIndex;\n\n    const updatedContainers = termins.map((termin, index) => {\n    \n      const timeIn = timeToSeconds(termin.time_in);\n      const isVisible = currentTime >= timeIn;\n\n      if (isVisible && !termin.isVisible) {\n        if (index !== newCurrentContainerIndex) {\n          // Проверьте, был ли контейнер уже автоматически выбран\n          if (!autoSelectedContainers[termin.id]) {\n            newSelectedNav = termin.type;\n            // Обновите autoSelectedContainers\n            setAutoSelectedContainers((autoSelectedContainers) => ({\n              ...autoSelectedContainers,\n              [termin.id]: true,\n            }));\n          }\n          newCurrentContainerIndex = index;\n        }\n      }\n   \n     \n      return { ...termin, isVisible };\n\n      \n    });\n\n    if (newSelectedNav !== selectedNav) {\n      setSelectedNav(newSelectedNav);\n    }\n  \n    setCurrentContainerIndex(newCurrentContainerIndex);\n    if (newCurrentContainerIndex !== lastContainerIndex) {\n      setCurrentContainerIndex(newCurrentContainerIndex);\n      setLastContainerIndex(newCurrentContainerIndex);\n    }\n    \n    if (newCurrentContainerIndex + 1 > currentPage * itemsPerPage) {\n      setCurrentPage((currentPage) => currentPage + 0.5);\n    }\n    \n\n    setLastContainerIndex(newCurrentContainerIndex);\n\n    return updatedContainers;\n  });\n\n};\n\nconst handleVideoEnd = () => {\n  setVideoEnded(true);\n  setVideoEnding(false); // Сбросить состояние, чтобы не показывать кнопку после окончания видео\n};\n\n// Измените useEffect, чтобы сбрасывать wasNavChangedManually обратно в false, когда видео достигает конца\nuseEffect(() => {\n  if (videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n    currentTimePromise.then((currentTime) => {\n      if (videoRef.current && currentTime >= duration) {\n        setWasNavChangedManually(false);\n      }\n    })\n  }\n}, [videoRef.current]);\n\nuseEffect(() => {\n  const fetchData = async () => {\n    try {\n      const response = await fetch(`${BASE_URL}tourschoolphp/lessonvideo.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces, course: courseWithSpaces }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Ошибка при запросе данных');\n      }\n\n      const responseBody = await response.text();\n      const data = JSON.parse(responseBody);\n      setResponseData(data);\n    } catch (error) {\n      console.error('Ошибка при отправке запроса:', error);\n    } finally {\n      // Устанавливаем статус загрузки в false после завершения запроса\n      setLoading(false);\n  }\n\n    try {\n      const response = await fetch(`${BASE_URL}tourschoolphp/containersmodel.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n  \n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setContainers(data.map((container) => ({ ...container, key: container.id })));\n      } catch (error) {\n        // console.error('Ошибка при отправке запроса:', error);\n      }\n\n      try {\n        const response = await fetch(`${BASE_URL}tourschoolphp/termins.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n  \n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        setTermins(data.map((termin) => ({ ...termin, key: termin.id })));\n      } catch (error) {\n        \n      }\n\n      try {\n        const response = await fetch(`${BASE_URL}tourschoolphp/doplink.php`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ lesson: titleWithSpaces }),\n      });\n  \n        if (!response.ok) {\n          throw new Error('Ошибка при запросе данных');\n        }\n\n        const responseBody = await response.text();\n        const data = JSON.parse(responseBody);\n        if (Array.isArray(data)) {\n          setDoplinks(data.map((doplink) => ({ ...doplink, key: doplink.id })));\n        }\n      } catch (error) {\n        console.error('Ошибка при отправке запроса:', error);\n      }\n\n    };\n    fetchData();\n\n    // function onPlayerReady(event) {\n    //   const intervalId = setInterval(updateTime, 1000); // обновляйте время каждую секунду\n  \n    //   // Очистите интервал при размонтировании\n    //   return () => {\n    //     clearInterval(intervalId);\n    //   };\n    // }\n  \n    // // Обновите время воспроизведения\n    // function updateTime() {\n    //   const currentTime = videoRef.getCurrentTime();\n    //   handleTimeUpdate(currentTime); // здесь ваша функция handleTimeUpdate\n    // }\n  \n  \n\n    }, [titleWithSpaces, containers, termins, videoEnding]);\n  \n\n    \n  const timeToSeconds = (time) => {\n    let parts = time.split(':');\n    return (+parts[0]) * 60 * 60 + (+parts[1]) * 60 + (+parts[2]);\n  }\n\n  \n  const handleOptionClick = (option, questionId, index) => {\n    const currentQuestion = questions.find((q) => q.id === questionId);\n    const isAnswerCorrect = option === currentQuestion.correct_answer;\n    setAnswerCorrectness(prevState => ({\n      ...prevState,\n      [`${questionId}-${index}`]: isAnswerCorrect,\n  }));\n  setButtonClass(prevButtonClass => ({\n      ...prevButtonClass,\n      [`${questionId}-${index}`]: isAnswerCorrect ? 'buttonindex-correct' : 'buttonindex-incorrect',\n  }));\n\n    // Update the class name for the clicked button based on the correctness of the answer\n    const updatedOptions = [...questions[currentQuestionIndex].options];\n  \n    setQuestions((prevQuestions) => {\n      const updatedQuestions = [...prevQuestions];\n      updatedQuestions[currentQuestionIndex] = {\n        ...updatedQuestions[currentQuestionIndex],\n        options: updatedOptions,\n      };\n      return updatedQuestions;\n    });\n  \n    // Rest of your code remains unchanged\n    setQuestionTries((prevTries) => {\n      const currentTries = prevTries[questionId] || { total: 0, lastAttempt: 0 };\n  \n      const updatedTries = {\n        ...prevTries,\n        [questionId]: {\n          total: currentTries.total + 1,\n          lastAttempt: isAnswerCorrect ? currentTries.lastAttempt + 1 : currentTries.lastAttempt,\n        },\n      };\n  \n      if (!isAnswerCorrect && currentTries.total >= 2) {\n        setIncorrectMessages((prevMessages) => ({\n          ...prevMessages,\n          [questionId]: `Неправильный ответ. Правильный ответ: ${currentQuestion.correct_answer}`,\n        }));\n  \n        // Do not reset the total count here\n        updatedTries[questionId] = { total: currentTries.total, lastAttempt: 0 };\n      } else {\n        setIncorrectMessages((prevMessages) => ({\n          ...prevMessages,\n          [questionId]: isAnswerCorrect ? '' : 'Неправильный ответ. Попробуйте еще раз',\n        }));\n  \n        if (isAnswerCorrect) {\n          setQuestions((prevQuestions) => prevQuestions.filter((q) => q.id !== currentQuestion.id));\n          setCurrentQuestionIndex((prevIndex) => {\n            const nextIndex = prevIndex + 1;\n            return nextIndex < questions.length ? nextIndex : 0;\n          });\n          videoRef.current.internalPlayer.playVideo();\n  \n          // Send data to the server only for correct answers\n          fetch(`${BASE_URL}tourschoolphp/testresult.php`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              user: user_id,\n              testid: currentQuestion.id,\n              tries: updatedTries[questionId]?.total || 0,\n              timestamp: formattedTimestamp,\n            }),\n          })\n            .then(response => {\n              if (!response.ok) {\n                throw new Error('Ошибка при сохранении ответа на сервере');\n              }\n              return response.text();\n            })\n            .then(data => {\n              console.log('Server response:', data);\n              return JSON.parse(data);\n            })\n            .catch(error => {\n              console.error('Ошибка при отправке запроса:', error);\n            });\n        }\n      }\n  \n      return updatedTries;\n    });\n  \n  \n    if (isAnswerCorrect) {\n      setSuccessfulTries((prev) => ({ ...prev, [questionId]: (prev[questionId] || 0) + 1 }));\n    } else {\n      setUnsuccessfulTries((prev) => ({ ...prev, [questionId]: (prev[questionId] || 0) + 1 }));\n    };\n\n    if (questions.length === 1) {\n      // If there are no more questions, set allTestsPassed to true\n      setAllTestsPassed(true);\n    }\n  };\n\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if(videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n  currentTimePromise.then((currentTime) => {\n    containers.forEach((container) => {\n      let timeIn = timeToSeconds(container.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n  \n   \n    });\n  \n    if (videoRef.current && currentTime > maxTimeOut) {\n      setIsNavChangedManually(false);\n      setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n    }\n  })\n}\n  }, [containers, videoRef.current, isNavChangedManually]);\n  const videoOptions = {\n    height: '500px',      // Высота плеера\n    width: '100%',       // Ширина плеера\n    playerVars: {       // Параметры плеера\n      autoplay: 1,      // Автовоспроизведение видео\n      controls: 1,      // Отображение элементов управления\n      showinfo: 0,      // Отображение информации о видео\n      modestbranding: 0 // Удаление логотипа YouTube\n    }\n  };\n\n\n  useEffect(() => {\n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if(videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n  currentTimePromise.then((currentTime) => {\n    termins.forEach((\n      termin) => {\n      let timeIn = timeToSeconds(termin.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n  \n   \n    });\n  \n    if (videoRef.current && currentTime > maxTimeOut) {\n      setIsNavChangedManually(false);\n      setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n    }\n  })\n}\n  }, [termins, videoRef.current, isNavChangedManually]);\n\n  \n  \n  useEffect(() => {\n  \n    let maxTimeOut = 0;\n    let newSelectedNav = selectedNav; // Keep track of the selected navigation\n    if(videoRef.current) {\n    const currentTimePromise = videoRef.current.internalPlayer.getCurrentTime();\n\n  currentTimePromise.then((currentTime) => {\n    questions.forEach((\n      question) => {\n      let timeIn = timeToSeconds(question.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn && currentTime;\n  \n   \n    });\n  \n    if (videoRef.current && currentTime > maxTimeOut) {\n      setIsNavChangedManually(false);\n      setShouldAutoSelectNav(true); // Set shouldAutoSelectNav to true here\n    }\n  })\n}\n  }, [questions, videoRef.current, isNavChangedManually]);\n  \n  const handleFinishLesson = () => {\n    fetch(`${BASE_URL}tourschoolphp/finishlesson.php`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        user: user_id,\n        lesson: titleWithSpaces,\n        date: formattedTimestamp,\n      })\n    })\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Ошибка при сохранении ответа на сервере');\n      }\n      return response.text();\n    })\n    .then(data => {\n      console.log('Server response:', data);\n      return JSON.parse(data);\n    })\n    .catch(error => {\n      console.error('Ошибка при отправке запроса:', error);\n    });\n}\n\nuseEffect(() => {\n  const fetchCurrentTime = async () => {\n    if (videoRef.current && videoRef.current.internalPlayer && videoRef.current.internalPlayer.getCurrentTime) {\n      const time = await videoRef.current.internalPlayer.getCurrentTime();\n      setCurrentTime(time);\n    }\n\n    if (videoRef.current && videoRef.current.internalPlayer && videoRef.current.internalPlayer.getDuration) {\n      const duration = await videoRef.current.internalPlayer.getDuration();\n      setDuration(duration);\n    }\n  };\n\n  fetchCurrentTime();\n  const intervalId = setInterval(fetchCurrentTime, 1000); // Update every second\n\n  return () => clearInterval(intervalId); // Clean up on unmount\n}, []);\n\nif (loading) {\n  return <div>Загрузка...</div>;\n} \n\n  return (\n    <div className='connews'>\n        <div className='containerlesson'>\n      <h1>{titleWithSpaces}</h1>\n      <div className='containervideoimg'>\n        \n      \n      {videoRef && responseData && (\n        <div className='videoless'>\n  <YouTube\n\n    videoId={responseData}\n    opts={videoOptions}\n    onStateChange={onStateChange}\n    ref={videoRef}\n  />\n  </div>\n)}\n                                                                                                                                                                                                              \n      {/* <img className='imageless' src=\"/egypt.png\"></img> */}\n      </div>\n      <div className='containerwithinfo'>\n        <div className='linewithtypes'>\n        <div className={`textnav ${selectedNav === 'Термины' || (!isManualNav === 'Термины') ? 'active' : ''}`} onClick={() => handleNavClick('Термины')}>Термины</div>\n        <div className={`textnav ${selectedNav === 'Тест' || (!isManualNav === 'Тест') ? 'active' : ''}`} onClick={() => handleNavClick('Тест')}>Тест</div>\n            <div className={`textnav ${selectedNav === 'Информация' || (!isManualNav  === 'Информация') ? 'active' : ''}`} onClick={() => handleNavClick('Информация')}>Информация</div>\n            <div className={`textnav ${selectedNav === 'Дополнительная информация' ? 'active' : ''}`} onClick={() => handleNavClick('Дополнительная информация')}>Ссылки</div>\n        </div>\n        {allTestsPassed && videoEnding && (\n        <a href={`/courses/${title}/${lesson}/summary-page`}>\n<button \n  className='urokend'\n  onClick={handleFinishLesson}\n>\n  Завершить урок\n</button>\n</a>\n\n\n)}\n        {questions.map((question) => {\n          if (videoRef.current) {\n            let timeIn = timeToSeconds(question.time_in);\n            let isVisible = videoRef.current && currentTime >= timeIn;\n          \n        \n  // Only render the question if it's both visible and its type matches the selected nav\n\n  if (isVisible && (selectedNav === question.type || (!isManualNav === question.type))) {\n    \n    return (\n\n    <React.Fragment key={question.id}>\n        <div className='testinfo' style={{ display: 'flex', margin: '5px 0' }}>\n         \n          <h2>{question.question}</h2>\n          <div className='buttoncontless'>\n          {question.options.map((option, index) => (\n    <button\n    className={buttonClass[`${question.id}-${index}`] || \"buttonindex\"}\n    key={index}\n    onClick={() => handleOptionClick(option, question.id, index)}\n>\n    {option}\n</button>\n\n            ))}\n\n        </div>\n        </div>\n        <br />\n      </React.Fragment>\n    );\n  }\n\n  return null;\n\n}\n})}\n\n  \n    \n{currentItems.map((container) => {\n  let timeIn = timeToSeconds(container.time_in);\n  let isVisible = videoRef.current && currentTime >= timeIn;\n\n  if (isVisible && (selectedNav === container.type || (!isManualNav === container.type))) {\n    if (isNavChangedManually && selectedNav !== container.type) {\n      return null;\n    }\n\n    // Проверка, является ли текст ссылкой на изображение\n    const imageFormats = ['.jpg', '.png', '.jpeg', '.gif', '.bmp', '.svg', '.webp'];\n    const isImage = imageFormats.some(format => container.text.includes(format));\n\n    return (\n      <>\n        <React.Fragment key={container.id}>\n          <div\n            className='textinfo'\n            style={{\n              display: 'block',\n              margin: '10px 0', // Add top and bottom margin of 10 pixels\n            }}\n          >\n            {isImage ? (\n          <img\n          src={`${BASE_URL}tourschoolphp/${container.text}`}\n          alt=\"123123\"\n          width=\"400\"\n          onClick={() => openModal(`${BASE_URL}tourschoolphp/${container.text}`)}\n        />\n\n            ) : (\n              container.text.split('\\n').map((line, index) => (\n                <React.Fragment key={index}>\n                  {line}\n                  <br />\n                </React.Fragment>\n              ))\n            )}\n          </div>\n        </React.Fragment>\n      </>\n    );\n  }\n  return null;\n})}\n\n\n  {termins.map((termin) => {\n      let timeIn = timeToSeconds(termin.time_in);\n      let isVisible = videoRef.current && currentTime >= timeIn;\n\n  if (isVisible && (selectedNav === termin.type || (!isManualNav === termin.type))) {\n    // Если пользователь вручную переключился на другой блок, не обновляйте блок автоматически\n    if (isNavChangedManually && selectedNav !== termin.type) {\n      return null;\n    }\n\n    return (\n      <React.Fragment key={termin.id}>\n        <div\n          className='textinfo'\n          style={{\n            display: 'block',\n            margin: '5px 0', // Add top and bottom margin of 10 pixels\n          }}\n        >\n      \n          {termin.text}\n        </div>\n        <br />\n      </React.Fragment>\n      \n    );\n  }\n  return null;\n})\n}\n{}\n{selectedNav === 'Дополнительная информация' &&\ndoplinks.map((doplink) => {\n // Если selectedNav - это переменная, которая должна быть обновлена, необходимо использовать '=' вместо ';'\n  return (\n    <div key={doplink.id}>\n      <div\n        className='textinfo'\n        style={{\n          display: 'block',\n          margin: '5px 0', // Add top and bottom margin of 10 pixels\n        }}\n      >\n        <a href={doplink.text}>{doplink.text}</a>  \n      </div>\n    </div>\n  );\n})}\n\n{modalOpen && (\n          <div className=\"modal7\">\n            <span className=\"close7\" onClick={closeModal}>&times;</span>\n            <img className=\"modal-content7\" src={selectedImage} alt=\"Enlarged Image\" />\n          </div>\n        )}\n\n<Navpanmini/>\n</div>\n</div>\n</div>\n);\n}\n\nexport default LessonListPage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}